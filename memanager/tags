!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ANALYSIS_ERROR	gen-cpp/Status_types.h	/^    ANALYSIS_ERROR = 2,$/;"	e	enum:memanager::TStatusCode::type
AddNode	consistent/consistent.h	/^    size_t HashRing<Node, Data>::AddNode(const Node& node)$/;"	f	class:Consistent::HashRing
AddNode	master/consistent.h	/^    size_t HashRing<Node, Data>::AddNode(const Node& node)$/;"	f	class:Consistent::HashRing
BIGINT	gen-cpp/Types_types.h	/^    BIGINT = 6,$/;"	e	enum:memanager::TPrimitiveType::type
BINARY	gen-cpp/Types_types.h	/^    BINARY = 13,$/;"	e	enum:memanager::TPrimitiveType::type
BOOLEAN	gen-cpp/Types_types.h	/^    BOOLEAN = 2,$/;"	e	enum:memanager::TPrimitiveType::type
BUILD_DIR	master/Makefile	/^BUILD_DIR=${THRIFT_GEN}\/build-in.o$/;"	m
BUILD_DIR	slaver/Makefile	/^BUILD_DIR=${THRIFT_GEN}\/build-in.o$/;"	m
CANCELLED	gen-cpp/Status_types.h	/^    CANCELLED = 1,$/;"	e	enum:memanager::TStatusCode::type
CHAR	gen-cpp/Types_types.h	/^    CHAR = 15$/;"	e	enum:memanager::TPrimitiveType::type
CLI_OBJS	slaver/Makefile	/^CLI_OBJS=$(patsubst %.cpp,%.o,$(wildcard *.cpp))$/;"	m
CONSISTENT_H	consistent/consistent.h	8;"	d
CONSISTENT_H	master/consistent.h	8;"	d
CPPFLAGS	master/Makefile	/^CPPFLAGS=-I${HDFS_INCLUDE} -I${JAVA_HOME}\/include -I${JAVA_HOME}\/include\/linux -I${THRIFT_GEN}$/;"	m
CPPFLAGS	slaver/Makefile	/^CPPFLAGS=-I${HDFS_INCLUDE} -I${JAVA_HOME}\/include -I${JAVA_HOME}\/include\/linux -I${THRIFT_GEN}$/;"	m
CXX	consistent/Makefile	/^CXX = g++ -std=c++11$/;"	m
CXX	gen-cpp/Makefile	/^CXX = g++ -std=c++11$/;"	m
CXX	master/Makefile	/^CXX = g++ -std=c++11$/;"	m
CXX	slaver/Makefile	/^CXX = g++ -std=c++11$/;"	m
CacheFile	master/table_info.h	/^size_t File_Info::CacheFile(const string& fileName){$/;"	f	class:File_Info
CacheServer	consistent/hashring.cpp	/^class CacheServer$/;"	c	file:
CacheServer	consistent/hashring_example.cpp	/^class CacheServer$/;"	c	file:
Consistent	consistent/consistent.h	/^namespace Consistent$/;"	n
Consistent	master/consistent.h	/^namespace Consistent$/;"	n
DATE	gen-cpp/Types_types.h	/^    DATE = 9,$/;"	e	enum:memanager::TPrimitiveType::type
DATETIME	gen-cpp/Types_types.h	/^    DATETIME = 10,$/;"	e	enum:memanager::TPrimitiveType::type
DECIMAL	gen-cpp/Types_types.h	/^    DECIMAL = 14,$/;"	e	enum:memanager::TPrimitiveType::type
DIR_SRC	gen-cpp/Makefile	/^DIR_SRC=gen-cpp$/;"	m
DOUBLE	gen-cpp/Types_types.h	/^    DOUBLE = 8,$/;"	e	enum:memanager::TPrimitiveType::type
DataConstants	gen-cpp/Data_constants.cpp	/^DataConstants::DataConstants() {$/;"	f	class:memanager::DataConstants
DataConstants	gen-cpp/Data_constants.h	/^class DataConstants {$/;"	c	namespace:memanager
Data_CONSTANTS_H	gen-cpp/Data_constants.h	8;"	d
Data_TYPES_H	gen-cpp/Data_types.h	8;"	d
EXTENDED	gen-cpp/Types_types.h	/^    EXTENDED = 2,$/;"	e	enum:memanager::TExplainLevel::type
EmptyRingException	consistent/consistent.h	/^  class EmptyRingException$/;"	c	namespace:Consistent
EmptyRingException	master/consistent.h	/^  class EmptyRingException$/;"	c	namespace:Consistent
FLOAT	gen-cpp/Types_types.h	/^    FLOAT = 7,$/;"	e	enum:memanager::TPrimitiveType::type
File_Info	master/table_info.h	/^class File_Info{$/;"	c
GEN_OBJ	gen-cpp/Makefile	/^GEN_OBJ := $(patsubst %.cpp,%.o, $(GEN_SRC))$/;"	m
GEN_SRC	gen-cpp/Makefile	/^GEN_SRC := $(wildcard *.cpp)$/;"	m
Get	consistent/hashring.cpp	/^    std::string Get(const std::string& key) const$/;"	f	class:CacheServer
Get	consistent/hashring_example.cpp	/^	std::string Get(const std::string& key) const$/;"	f	class:CacheServer
GetNode	consistent/consistent.h	/^    const Node& HashRing<Node, Data>::GetNode(const Data& data) const$/;"	f	class:Consistent::HashRing
GetNode	master/consistent.h	/^    const Node& HashRing<Node, Data>::GetNode(const Data& data) const$/;"	f	class:Consistent::HashRing
HDFS_INCLUDE	master/Makefile	/^HDFS_INCLUDE=${HADOOP_PREFIX}\/src\/c++\/libhdfs$/;"	m
HDFS_INCLUDE	slaver/Makefile	/^HDFS_INCLUDE=${HADOOP_PREFIX}\/src\/c++\/libhdfs$/;"	m
Handler	gen-cpp/trans_data.h	/^  typedef trans_dataIf Handler;$/;"	t	class:memanager::trans_dataIfFactory
Hash	consistent/consistent.h	/^  struct Hash$/;"	s	namespace:Consistent
Hash	master/consistent.h	/^  struct Hash$/;"	s	namespace:Consistent
HashRing	consistent/consistent.h	/^    HashRing(unsigned int replicas)$/;"	f	class:Consistent::HashRing
HashRing	consistent/consistent.h	/^    HashRing(unsigned int replicas, const Hash& hash)$/;"	f	class:Consistent::HashRing
HashRing	consistent/consistent.h	/^    class HashRing$/;"	c	namespace:Consistent
HashRing	master/consistent.h	/^    HashRing(unsigned int replicas)$/;"	f	class:Consistent::HashRing
HashRing	master/consistent.h	/^    HashRing(unsigned int replicas, const Hash& hash)$/;"	f	class:Consistent::HashRing
HashRing	master/consistent.h	/^    class HashRing$/;"	c	namespace:Consistent
INT	gen-cpp/Types_types.h	/^    INT = 5,$/;"	e	enum:memanager::TPrimitiveType::type
INTERNAL_ERROR	gen-cpp/Status_types.h	/^    INTERNAL_ERROR = 6,$/;"	e	enum:memanager::TStatusCode::type
INVALID_TYPE	gen-cpp/Types_types.h	/^    INVALID_TYPE = 0,$/;"	e	enum:memanager::TPrimitiveType::type
LIBHDFS	master/Makefile	/^LIBHDFS= -L\/home\/chaoyli\/hadoop\/c++\/Linux-amd64-64\/lib$/;"	m
LIBHDFS	slaver/Makefile	/^LIBHDFS= -L\/home\/chaoyli\/hadoop\/c++\/Linux-amd64-64\/lib$/;"	m
LIBJAVA	master/Makefile	/^LIBJAVA= -L${JAVA_HOME}\/jre\/lib\/amd64\/server\/$/;"	m
LIBJAVA	slaver/Makefile	/^LIBJAVA= -L${JAVA_HOME}\/jre\/lib\/amd64\/server\/$/;"	m
LOAD_DATA_H	slaver/load_data.h	7;"	d
MEM_LIMIT_EXCEEDED	gen-cpp/Status_types.h	/^    MEM_LIMIT_EXCEEDED = 5,$/;"	e	enum:memanager::TStatusCode::type
MINIMAL	gen-cpp/Types_types.h	/^    MINIMAL = 0,$/;"	e	enum:memanager::TExplainLevel::type
NONE	gen-cpp/Table_types.h	/^    NONE = 0,$/;"	e	enum:memanager::TAccessLevel::type
NOT_IMPLEMENTED_ERROR	gen-cpp/Status_types.h	/^    NOT_IMPLEMENTED_ERROR = 3,$/;"	e	enum:memanager::TStatusCode::type
NULL_TYPE	gen-cpp/Types_types.h	/^    NULL_TYPE = 1,$/;"	e	enum:memanager::TPrimitiveType::type
NodeMap	consistent/consistent.h	/^    typedef std::map<size_t, Node> NodeMap;$/;"	t	class:Consistent::HashRing
NodeMap	master/consistent.h	/^    typedef std::map<size_t, Node> NodeMap;$/;"	t	class:Consistent::HashRing
OK	gen-cpp/Status_types.h	/^    OK = 0,$/;"	e	enum:memanager::TStatusCode::type
PRINT_DATA_H	master/print_data.h	3;"	d
ProcessFunction	gen-cpp/trans_data.h	/^  typedef  void (trans_dataProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);$/;"	t	class:memanager::trans_dataProcessor
ProcessMap	gen-cpp/trans_data.h	/^  typedef std::map<std::string, ProcessFunction> ProcessMap;$/;"	t	class:memanager::trans_dataProcessor
Put	consistent/hashring.cpp	/^    void Put(const std::string& key, const std::string& value)$/;"	f	class:CacheServer
Put	consistent/hashring_example.cpp	/^	void Put(const std::string& key, const std::string& value)$/;"	f	class:CacheServer
READ_ONLY	gen-cpp/Table_types.h	/^    READ_ONLY = 2,$/;"	e	enum:memanager::TAccessLevel::type
READ_WRITE	gen-cpp/Table_types.h	/^    READ_WRITE = 1,$/;"	e	enum:memanager::TAccessLevel::type
RECOVERABLE_ERROR	gen-cpp/Status_types.h	/^    RECOVERABLE_ERROR = 7$/;"	e	enum:memanager::TStatusCode::type
RUNTIME_ERROR	gen-cpp/Status_types.h	/^    RUNTIME_ERROR = 4,$/;"	e	enum:memanager::TStatusCode::type
Remove	consistent/hashring.cpp	/^    void Remove(const std::string& key)$/;"	f	class:CacheServer
Remove	consistent/hashring_example.cpp	/^	void Remove(const std::string& key)$/;"	f	class:CacheServer
RemoveNode	consistent/consistent.h	/^    void HashRing<Node, Data>::RemoveNode(const Node& node)$/;"	f	class:Consistent::HashRing
RemoveNode	master/consistent.h	/^    void HashRing<Node, Data>::RemoveNode(const Node& node)$/;"	f	class:Consistent::HashRing
SER_OBJS	master/Makefile	/^SER_OBJS=$(patsubst %.cpp,%.o,$(wildcard *.cpp))$/;"	m
SET_TBMETA_H	slaver/set_tbmeta.h	8;"	d
SMALLINT	gen-cpp/Types_types.h	/^    SMALLINT = 4,$/;"	e	enum:memanager::TPrimitiveType::type
STANDARD	gen-cpp/Types_types.h	/^    STANDARD = 1,$/;"	e	enum:memanager::TExplainLevel::type
STRING	gen-cpp/Types_types.h	/^    STRING = 12,$/;"	e	enum:memanager::TPrimitiveType::type
SUBDIRS	Makefile	/^SUBDIRS=slaver master gen-cpp consistent$/;"	m
SdbmHash	consistent/hashring_example.cpp	/^struct SdbmHash$/;"	s	file:
StatusConstants	gen-cpp/Status_constants.cpp	/^StatusConstants::StatusConstants() {$/;"	f	class:memanager::StatusConstants
StatusConstants	gen-cpp/Status_constants.h	/^class StatusConstants {$/;"	c	namespace:memanager
Status_CONSTANTS_H	gen-cpp/Status_constants.h	8;"	d
Status_TYPES_H	gen-cpp/Status_types.h	8;"	d
StringMap	consistent/hashring.cpp	/^    typedef std::map<std::string, std::string> StringMap;$/;"	t	class:CacheServer	file:
StringMap	consistent/hashring_example.cpp	/^	typedef std::map<std::string, std::string> StringMap;$/;"	t	class:CacheServer	file:
Stringify	consistent/consistent.h	/^    std::string Stringify(const T& t)$/;"	f	namespace:__anon1
Stringify	consistent/consistent.h	/^    std::string Stringify(const char* const& str)$/;"	f	namespace:__anon1
Stringify	consistent/consistent.h	/^    std::string Stringify(const std::string& str)$/;"	f	namespace:__anon1
Stringify	master/consistent.h	/^    std::string Stringify(const T& t)$/;"	f	namespace:__anon2
Stringify	master/consistent.h	/^    std::string Stringify(const char* const& str)$/;"	f	namespace:__anon2
Stringify	master/consistent.h	/^    std::string Stringify(const std::string& str)$/;"	f	namespace:__anon2
StringifyException	consistent/consistent.h	/^  class StringifyException$/;"	c	namespace:__anon1
StringifyException	master/consistent.h	/^  class StringifyException$/;"	c	namespace:__anon2
TAccessLevel	gen-cpp/Table_types.h	/^struct TAccessLevel {$/;"	s	namespace:memanager
TColumn	gen-cpp/Table_types.h	/^  TColumn() : columnName(), comment(), position(0) {$/;"	f	class:memanager::TColumn
TColumn	gen-cpp/Table_types.h	/^class TColumn {$/;"	c	namespace:memanager
TColumnData	gen-cpp/Data_types.h	/^  TColumnData() {$/;"	f	class:memanager::TColumnData
TColumnData	gen-cpp/Data_types.h	/^class TColumnData {$/;"	c	namespace:memanager
TColumnStats	gen-cpp/Table_types.h	/^  TColumnStats() : avg_size(0), max_size(0), num_distinct_values(0), num_nulls(0) {$/;"	f	class:memanager::TColumnStats
TColumnStats	gen-cpp/Table_types.h	/^class TColumnStats {$/;"	c	namespace:memanager
TColumnType	gen-cpp/Types_types.h	/^  TColumnType() : type((TPrimitiveType::type)0), len(0), precision(0), scale(0) {$/;"	f	class:memanager::TColumnType
TColumnType	gen-cpp/Types_types.h	/^class TColumnType {$/;"	c	namespace:memanager
TColumnValue	gen-cpp/Data_types.h	/^  TColumnValue() : bool_val(0), byte_val(0), short_val(0), int_val(0), long_val(0), double_val(0), string_val(), binary_val() {$/;"	f	class:memanager::TColumnValue
TColumnValue	gen-cpp/Data_types.h	/^class TColumnValue {$/;"	c	namespace:memanager
TExplainLevel	gen-cpp/Types_types.h	/^struct TExplainLevel {$/;"	s	namespace:memanager
THRIFT_GEN	master/Makefile	/^THRIFT_GEN=..\/gen-cpp$/;"	m
THRIFT_GEN	slaver/Makefile	/^THRIFT_GEN=..\/gen-cpp$/;"	m
TIMESTAMP	gen-cpp/Types_types.h	/^    TIMESTAMP = 11,$/;"	e	enum:memanager::TPrimitiveType::type
TINYINT	gen-cpp/Types_types.h	/^    TINYINT = 3,$/;"	e	enum:memanager::TPrimitiveType::type
TNetworkAddress	gen-cpp/Types_types.h	/^  TNetworkAddress() : hostname(), port(0) {$/;"	f	class:memanager::TNetworkAddress
TNetworkAddress	gen-cpp/Types_types.h	/^class TNetworkAddress {$/;"	c	namespace:memanager
TPlanNodeId	gen-cpp/Types_types.h	/^typedef int32_t TPlanNodeId;$/;"	t	namespace:memanager
TPrimitiveType	gen-cpp/Types_types.h	/^struct TPrimitiveType {$/;"	s	namespace:memanager
TResultRow	gen-cpp/Data_types.h	/^  TResultRow() {$/;"	f	class:memanager::TResultRow
TResultRow	gen-cpp/Data_types.h	/^class TResultRow {$/;"	c	namespace:memanager
TResultSet	gen-cpp/Data_types.h	/^  TResultSet() {$/;"	f	class:memanager::TResultSet
TResultSet	gen-cpp/Data_types.h	/^class TResultSet {$/;"	c	namespace:memanager
TResultSetMetadata	gen-cpp/Data_types.h	/^  TResultSetMetadata() {$/;"	f	class:memanager::TResultSetMetadata
TResultSetMetadata	gen-cpp/Data_types.h	/^class TResultSetMetadata {$/;"	c	namespace:memanager
TRowBatch	gen-cpp/Data_types.h	/^  TRowBatch() : num_rows(0), tuple_data(), is_compressed(0) {$/;"	f	class:memanager::TRowBatch
TRowBatch	gen-cpp/Data_types.h	/^class TRowBatch {$/;"	c	namespace:memanager
TSlotId	gen-cpp/Types_types.h	/^typedef int32_t TSlotId;$/;"	t	namespace:memanager
TStatus	gen-cpp/Status_types.h	/^  TStatus() : status_code((TStatusCode::type)0) {$/;"	f	class:memanager::TStatus
TStatus	gen-cpp/Status_types.h	/^class TStatus {$/;"	c	namespace:memanager
TStatusCode	gen-cpp/Status_types.h	/^struct TStatusCode {$/;"	s	namespace:memanager
TTable	gen-cpp/Table_types.h	/^  TTable() : tbl_name(), id(0), access_level((TAccessLevel::type)0) {$/;"	f	class:memanager::TTable
TTable	gen-cpp/Table_types.h	/^class TTable {$/;"	c	namespace:memanager
TTableId	gen-cpp/Types_types.h	/^typedef int32_t TTableId;$/;"	t	namespace:memanager
TTableStats	gen-cpp/Table_types.h	/^  TTableStats() : num_rows(0) {$/;"	f	class:memanager::TTableStats
TTableStats	gen-cpp/Table_types.h	/^class TTableStats {$/;"	c	namespace:memanager
TTimestamp	gen-cpp/Types_types.h	/^typedef int64_t TTimestamp;$/;"	t	namespace:memanager
TTupleId	gen-cpp/Types_types.h	/^typedef int32_t TTupleId;$/;"	t	namespace:memanager
TUniqueId	gen-cpp/Types_types.h	/^  TUniqueId() : hi(0), lo(0) {$/;"	f	class:memanager::TUniqueId
TUniqueId	gen-cpp/Types_types.h	/^class TUniqueId {$/;"	c	namespace:memanager
TableConstants	gen-cpp/Table_constants.cpp	/^TableConstants::TableConstants() {$/;"	f	class:memanager::TableConstants
TableConstants	gen-cpp/Table_constants.h	/^class TableConstants {$/;"	c	namespace:memanager
Table_CONSTANTS_H	gen-cpp/Table_constants.h	8;"	d
Table_TYPES_H	gen-cpp/Table_types.h	8;"	d
TypesConstants	gen-cpp/Types_constants.cpp	/^TypesConstants::TypesConstants() {$/;"	f	class:memanager::TypesConstants
TypesConstants	gen-cpp/Types_constants.h	/^class TypesConstants {$/;"	c	namespace:memanager
Types_CONSTANTS_H	gen-cpp/Types_constants.h	8;"	d
Types_TYPES_H	gen-cpp/Types_types.h	8;"	d
VERBOSE	gen-cpp/Types_types.h	/^    VERBOSE = 3$/;"	e	enum:memanager::TExplainLevel::type
WRITE_ONLY	gen-cpp/Table_types.h	/^    WRITE_ONLY = 3$/;"	e	enum:memanager::TAccessLevel::type
_TColumnData__isset	gen-cpp/Data_types.h	/^  _TColumnData__isset() : bool_vals(false), byte_vals(false), short_vals(false), int_vals(false), long_vals(false), double_vals(false), string_vals(false), binary_vals(false) {}$/;"	f	struct:memanager::_TColumnData__isset
_TColumnData__isset	gen-cpp/Data_types.h	/^typedef struct _TColumnData__isset {$/;"	s	namespace:memanager
_TColumnData__isset	gen-cpp/Data_types.h	/^} _TColumnData__isset;$/;"	t	namespace:memanager	typeref:struct:memanager::_TColumnData__isset
_TColumnType__isset	gen-cpp/Types_types.h	/^  _TColumnType__isset() : len(false), precision(false), scale(false) {}$/;"	f	struct:memanager::_TColumnType__isset
_TColumnType__isset	gen-cpp/Types_types.h	/^typedef struct _TColumnType__isset {$/;"	s	namespace:memanager
_TColumnType__isset	gen-cpp/Types_types.h	/^} _TColumnType__isset;$/;"	t	namespace:memanager	typeref:struct:memanager::_TColumnType__isset
_TColumnValue__isset	gen-cpp/Data_types.h	/^  _TColumnValue__isset() : bool_val(false), byte_val(false), short_val(false), int_val(false), long_val(false), double_val(false), string_val(false), binary_val(false) {}$/;"	f	struct:memanager::_TColumnValue__isset
_TColumnValue__isset	gen-cpp/Data_types.h	/^typedef struct _TColumnValue__isset {$/;"	s	namespace:memanager
_TColumnValue__isset	gen-cpp/Data_types.h	/^} _TColumnValue__isset;$/;"	t	namespace:memanager	typeref:struct:memanager::_TColumnValue__isset
_TColumn__isset	gen-cpp/Table_types.h	/^  _TColumn__isset() : comment(false), col_stats(false), position(false) {}$/;"	f	struct:memanager::_TColumn__isset
_TColumn__isset	gen-cpp/Table_types.h	/^typedef struct _TColumn__isset {$/;"	s	namespace:memanager
_TColumn__isset	gen-cpp/Table_types.h	/^} _TColumn__isset;$/;"	t	namespace:memanager	typeref:struct:memanager::_TColumn__isset
_TResultRow__isset	gen-cpp/Data_types.h	/^  _TResultRow__isset() : colVals(false) {}$/;"	f	struct:memanager::_TResultRow__isset
_TResultRow__isset	gen-cpp/Data_types.h	/^typedef struct _TResultRow__isset {$/;"	s	namespace:memanager
_TResultRow__isset	gen-cpp/Data_types.h	/^} _TResultRow__isset;$/;"	t	namespace:memanager	typeref:struct:memanager::_TResultRow__isset
_TRowBatch__isset	gen-cpp/Data_types.h	/^  _TRowBatch__isset() : tuple_offsets(false), tuple_data(false), is_compressed(false) {}$/;"	f	struct:memanager::_TRowBatch__isset
_TRowBatch__isset	gen-cpp/Data_types.h	/^typedef struct _TRowBatch__isset {$/;"	s	namespace:memanager
_TRowBatch__isset	gen-cpp/Data_types.h	/^} _TRowBatch__isset;$/;"	t	namespace:memanager	typeref:struct:memanager::_TRowBatch__isset
_TStatus__isset	gen-cpp/Status_types.h	/^  _TStatus__isset() : error_msgs(false) {}$/;"	f	struct:memanager::_TStatus__isset
_TStatus__isset	gen-cpp/Status_types.h	/^typedef struct _TStatus__isset {$/;"	s	namespace:memanager
_TStatus__isset	gen-cpp/Status_types.h	/^} _TStatus__isset;$/;"	t	namespace:memanager	typeref:struct:memanager::_TStatus__isset
_TTable__isset	gen-cpp/Table_types.h	/^  _TTable__isset() : load_status(false), id(false), access_level(false), columns(false), clustering_columns(false), table_stats(false) {}$/;"	f	struct:memanager::_TTable__isset
_TTable__isset	gen-cpp/Table_types.h	/^typedef struct _TTable__isset {$/;"	s	namespace:memanager
_TTable__isset	gen-cpp/Table_types.h	/^} _TTable__isset;$/;"	t	namespace:memanager	typeref:struct:memanager::_TTable__isset
__isset	gen-cpp/Data_types.h	/^  _TColumnData__isset __isset;$/;"	m	class:memanager::TColumnData
__isset	gen-cpp/Data_types.h	/^  _TColumnValue__isset __isset;$/;"	m	class:memanager::TColumnValue
__isset	gen-cpp/Data_types.h	/^  _TResultRow__isset __isset;$/;"	m	class:memanager::TResultRow
__isset	gen-cpp/Data_types.h	/^  _TRowBatch__isset __isset;$/;"	m	class:memanager::TRowBatch
__isset	gen-cpp/Status_types.h	/^  _TStatus__isset __isset;$/;"	m	class:memanager::TStatus
__isset	gen-cpp/Table_types.h	/^  _TColumn__isset __isset;$/;"	m	class:memanager::TColumn
__isset	gen-cpp/Table_types.h	/^  _TTable__isset __isset;$/;"	m	class:memanager::TTable
__isset	gen-cpp/Types_types.h	/^  _TColumnType__isset __isset;$/;"	m	class:memanager::TColumnType
__isset	gen-cpp/trans_data.h	/^  _trans_data_trans_data_args__isset __isset;$/;"	m	class:memanager::trans_data_trans_data_args
__set_access_level	gen-cpp/Table_types.h	/^  void __set_access_level(const TAccessLevel::type val) {$/;"	f	class:memanager::TTable
__set_avg_size	gen-cpp/Table_types.h	/^  void __set_avg_size(const double val) {$/;"	f	class:memanager::TColumnStats
__set_binary_val	gen-cpp/Data_types.h	/^  void __set_binary_val(const std::string& val) {$/;"	f	class:memanager::TColumnValue
__set_binary_vals	gen-cpp/Data_types.h	/^  void __set_binary_vals(const std::vector<std::string> & val) {$/;"	f	class:memanager::TColumnData
__set_bool_val	gen-cpp/Data_types.h	/^  void __set_bool_val(const bool val) {$/;"	f	class:memanager::TColumnValue
__set_bool_vals	gen-cpp/Data_types.h	/^  void __set_bool_vals(const std::vector<bool> & val) {$/;"	f	class:memanager::TColumnData
__set_byte_val	gen-cpp/Data_types.h	/^  void __set_byte_val(const int8_t val) {$/;"	f	class:memanager::TColumnValue
__set_byte_vals	gen-cpp/Data_types.h	/^  void __set_byte_vals(const std::vector<int8_t> & val) {$/;"	f	class:memanager::TColumnData
__set_clustering_columns	gen-cpp/Table_types.h	/^  void __set_clustering_columns(const std::vector<TColumn> & val) {$/;"	f	class:memanager::TTable
__set_colVals	gen-cpp/Data_types.h	/^  void __set_colVals(const std::vector<TColumnValue> & val) {$/;"	f	class:memanager::TResultRow
__set_col_stats	gen-cpp/Table_types.h	/^  void __set_col_stats(const TColumnStats& val) {$/;"	f	class:memanager::TColumn
__set_columnName	gen-cpp/Table_types.h	/^  void __set_columnName(const std::string& val) {$/;"	f	class:memanager::TColumn
__set_columnType	gen-cpp/Table_types.h	/^  void __set_columnType(const  ::memanager::TColumnType& val) {$/;"	f	class:memanager::TColumn
__set_columns	gen-cpp/Data_types.h	/^  void __set_columns(const std::vector< ::memanager::TColumn> & val) {$/;"	f	class:memanager::TResultSetMetadata
__set_columns	gen-cpp/Table_types.h	/^  void __set_columns(const std::vector<TColumn> & val) {$/;"	f	class:memanager::TTable
__set_comment	gen-cpp/Table_types.h	/^  void __set_comment(const std::string& val) {$/;"	f	class:memanager::TColumn
__set_double_val	gen-cpp/Data_types.h	/^  void __set_double_val(const double val) {$/;"	f	class:memanager::TColumnValue
__set_double_vals	gen-cpp/Data_types.h	/^  void __set_double_vals(const std::vector<double> & val) {$/;"	f	class:memanager::TColumnData
__set_error_msgs	gen-cpp/Status_types.h	/^  void __set_error_msgs(const std::vector<std::string> & val) {$/;"	f	class:memanager::TStatus
__set_hi	gen-cpp/Types_types.h	/^  void __set_hi(const int64_t val) {$/;"	f	class:memanager::TUniqueId
__set_hostname	gen-cpp/Types_types.h	/^  void __set_hostname(const std::string& val) {$/;"	f	class:memanager::TNetworkAddress
__set_id	gen-cpp/Table_types.h	/^  void __set_id(const  ::memanager::TTableId val) {$/;"	f	class:memanager::TTable
__set_int_val	gen-cpp/Data_types.h	/^  void __set_int_val(const int32_t val) {$/;"	f	class:memanager::TColumnValue
__set_int_vals	gen-cpp/Data_types.h	/^  void __set_int_vals(const std::vector<int32_t> & val) {$/;"	f	class:memanager::TColumnData
__set_is_compressed	gen-cpp/Data_types.h	/^  void __set_is_compressed(const bool val) {$/;"	f	class:memanager::TRowBatch
__set_is_null	gen-cpp/Data_types.h	/^  void __set_is_null(const std::vector<bool> & val) {$/;"	f	class:memanager::TColumnData
__set_len	gen-cpp/Types_types.h	/^  void __set_len(const int32_t val) {$/;"	f	class:memanager::TColumnType
__set_lo	gen-cpp/Types_types.h	/^  void __set_lo(const int64_t val) {$/;"	f	class:memanager::TUniqueId
__set_load_status	gen-cpp/Table_types.h	/^  void __set_load_status(const  ::memanager::TStatus& val) {$/;"	f	class:memanager::TTable
__set_long_val	gen-cpp/Data_types.h	/^  void __set_long_val(const int64_t val) {$/;"	f	class:memanager::TColumnValue
__set_long_vals	gen-cpp/Data_types.h	/^  void __set_long_vals(const std::vector<int64_t> & val) {$/;"	f	class:memanager::TColumnData
__set_max_size	gen-cpp/Table_types.h	/^  void __set_max_size(const int64_t val) {$/;"	f	class:memanager::TColumnStats
__set_num_distinct_values	gen-cpp/Table_types.h	/^  void __set_num_distinct_values(const int64_t val) {$/;"	f	class:memanager::TColumnStats
__set_num_nulls	gen-cpp/Table_types.h	/^  void __set_num_nulls(const int64_t val) {$/;"	f	class:memanager::TColumnStats
__set_num_rows	gen-cpp/Data_types.h	/^  void __set_num_rows(const int32_t val) {$/;"	f	class:memanager::TRowBatch
__set_num_rows	gen-cpp/Table_types.h	/^  void __set_num_rows(const int64_t val) {$/;"	f	class:memanager::TTableStats
__set_port	gen-cpp/Types_types.h	/^  void __set_port(const int32_t val) {$/;"	f	class:memanager::TNetworkAddress
__set_position	gen-cpp/Table_types.h	/^  void __set_position(const int32_t val) {$/;"	f	class:memanager::TColumn
__set_precision	gen-cpp/Types_types.h	/^  void __set_precision(const int32_t val) {$/;"	f	class:memanager::TColumnType
__set_resultSet	gen-cpp/trans_data.h	/^  void __set_resultSet(const TResultSet& val) {$/;"	f	class:memanager::trans_data_trans_data_args
__set_row_tuples	gen-cpp/Data_types.h	/^  void __set_row_tuples(const std::vector< ::memanager::TTupleId> & val) {$/;"	f	class:memanager::TRowBatch
__set_rows	gen-cpp/Data_types.h	/^  void __set_rows(const std::vector<TResultRow> & val) {$/;"	f	class:memanager::TResultSet
__set_scale	gen-cpp/Types_types.h	/^  void __set_scale(const int32_t val) {$/;"	f	class:memanager::TColumnType
__set_schema	gen-cpp/Data_types.h	/^  void __set_schema(const TResultSetMetadata& val) {$/;"	f	class:memanager::TResultSet
__set_short_val	gen-cpp/Data_types.h	/^  void __set_short_val(const int16_t val) {$/;"	f	class:memanager::TColumnValue
__set_short_vals	gen-cpp/Data_types.h	/^  void __set_short_vals(const std::vector<int16_t> & val) {$/;"	f	class:memanager::TColumnData
__set_status_code	gen-cpp/Status_types.h	/^  void __set_status_code(const TStatusCode::type val) {$/;"	f	class:memanager::TStatus
__set_string_val	gen-cpp/Data_types.h	/^  void __set_string_val(const std::string& val) {$/;"	f	class:memanager::TColumnValue
__set_string_vals	gen-cpp/Data_types.h	/^  void __set_string_vals(const std::vector<std::string> & val) {$/;"	f	class:memanager::TColumnData
__set_table_stats	gen-cpp/Table_types.h	/^  void __set_table_stats(const TTableStats& val) {$/;"	f	class:memanager::TTable
__set_tb	gen-cpp/trans_data.h	/^  void __set_tb(const  ::memanager::TTable& val) {$/;"	f	class:memanager::trans_data_trans_data_args
__set_tbl_name	gen-cpp/Table_types.h	/^  void __set_tbl_name(const std::string& val) {$/;"	f	class:memanager::TTable
__set_tuple_data	gen-cpp/Data_types.h	/^  void __set_tuple_data(const std::string& val) {$/;"	f	class:memanager::TRowBatch
__set_tuple_offsets	gen-cpp/Data_types.h	/^  void __set_tuple_offsets(const std::vector<int32_t> & val) {$/;"	f	class:memanager::TRowBatch
__set_type	gen-cpp/Types_types.h	/^  void __set_type(const TPrimitiveType::type val) {$/;"	f	class:memanager::TColumnType
_kTAccessLevelNames	gen-cpp/Table_types.cpp	/^const char* _kTAccessLevelNames[] = {$/;"	m	namespace:memanager	file:
_kTAccessLevelValues	gen-cpp/Table_types.cpp	/^int _kTAccessLevelValues[] = {$/;"	m	namespace:memanager	file:
_kTExplainLevelNames	gen-cpp/Types_types.cpp	/^const char* _kTExplainLevelNames[] = {$/;"	m	namespace:memanager	file:
_kTExplainLevelValues	gen-cpp/Types_types.cpp	/^int _kTExplainLevelValues[] = {$/;"	m	namespace:memanager	file:
_kTPrimitiveTypeNames	gen-cpp/Types_types.cpp	/^const char* _kTPrimitiveTypeNames[] = {$/;"	m	namespace:memanager	file:
_kTPrimitiveTypeValues	gen-cpp/Types_types.cpp	/^int _kTPrimitiveTypeValues[] = {$/;"	m	namespace:memanager	file:
_kTStatusCodeNames	gen-cpp/Status_types.cpp	/^const char* _kTStatusCodeNames[] = {$/;"	m	namespace:memanager	file:
_kTStatusCodeValues	gen-cpp/Status_types.cpp	/^int _kTStatusCodeValues[] = {$/;"	m	namespace:memanager	file:
_trans_data_trans_data_args__isset	gen-cpp/trans_data.h	/^  _trans_data_trans_data_args__isset() : resultSet(false), tb(false) {}$/;"	f	struct:memanager::_trans_data_trans_data_args__isset
_trans_data_trans_data_args__isset	gen-cpp/trans_data.h	/^typedef struct _trans_data_trans_data_args__isset {$/;"	s	namespace:memanager
_trans_data_trans_data_args__isset	gen-cpp/trans_data.h	/^} _trans_data_trans_data_args__isset;$/;"	t	namespace:memanager	typeref:struct:memanager::_trans_data_trans_data_args__isset
access_level	gen-cpp/Table_types.h	/^  TAccessLevel::type access_level;$/;"	m	class:memanager::TTable
access_level	gen-cpp/Table_types.h	/^  bool access_level;$/;"	m	struct:memanager::_TTable__isset
add	gen-cpp/trans_data.h	/^  void add(boost::shared_ptr<trans_dataIf> iface) {$/;"	f	class:memanager::trans_dataMultiface
ascii_fingerprint	gen-cpp/Data_types.cpp	/^const char* TColumnData::ascii_fingerprint = "2F7A9538DF8A57EF0FF04950F29792C2";$/;"	m	class:memanager::TColumnData	file:
ascii_fingerprint	gen-cpp/Data_types.cpp	/^const char* TColumnValue::ascii_fingerprint = "15543D4AC23DC11B825EEE5A988F6DEE";$/;"	m	class:memanager::TColumnValue	file:
ascii_fingerprint	gen-cpp/Data_types.cpp	/^const char* TResultRow::ascii_fingerprint = "0010C6F851B6BC51F346FDABAD206952";$/;"	m	class:memanager::TResultRow	file:
ascii_fingerprint	gen-cpp/Data_types.cpp	/^const char* TResultSet::ascii_fingerprint = "1362716866A6FEEEE411C44C41CC0015";$/;"	m	class:memanager::TResultSet	file:
ascii_fingerprint	gen-cpp/Data_types.cpp	/^const char* TResultSetMetadata::ascii_fingerprint = "9844D65221B9D9152C1984B941D08BBB";$/;"	m	class:memanager::TResultSetMetadata	file:
ascii_fingerprint	gen-cpp/Data_types.cpp	/^const char* TRowBatch::ascii_fingerprint = "DA731EC0B9FA69ECC857FB6D2038C1D3";$/;"	m	class:memanager::TRowBatch	file:
ascii_fingerprint	gen-cpp/Data_types.h	/^  static const char* ascii_fingerprint; \/\/ = "0010C6F851B6BC51F346FDABAD206952";$/;"	m	class:memanager::TResultRow
ascii_fingerprint	gen-cpp/Data_types.h	/^  static const char* ascii_fingerprint; \/\/ = "1362716866A6FEEEE411C44C41CC0015";$/;"	m	class:memanager::TResultSet
ascii_fingerprint	gen-cpp/Data_types.h	/^  static const char* ascii_fingerprint; \/\/ = "15543D4AC23DC11B825EEE5A988F6DEE";$/;"	m	class:memanager::TColumnValue
ascii_fingerprint	gen-cpp/Data_types.h	/^  static const char* ascii_fingerprint; \/\/ = "2F7A9538DF8A57EF0FF04950F29792C2";$/;"	m	class:memanager::TColumnData
ascii_fingerprint	gen-cpp/Data_types.h	/^  static const char* ascii_fingerprint; \/\/ = "9844D65221B9D9152C1984B941D08BBB";$/;"	m	class:memanager::TResultSetMetadata
ascii_fingerprint	gen-cpp/Data_types.h	/^  static const char* ascii_fingerprint; \/\/ = "DA731EC0B9FA69ECC857FB6D2038C1D3";$/;"	m	class:memanager::TRowBatch
ascii_fingerprint	gen-cpp/Status_types.cpp	/^const char* TStatus::ascii_fingerprint = "A22BE3E84688C9DA4E00CC902B4EE818";$/;"	m	class:memanager::TStatus	file:
ascii_fingerprint	gen-cpp/Status_types.h	/^  static const char* ascii_fingerprint; \/\/ = "A22BE3E84688C9DA4E00CC902B4EE818";$/;"	m	class:memanager::TStatus
ascii_fingerprint	gen-cpp/Table_types.cpp	/^const char* TColumn::ascii_fingerprint = "46C7DD290D595CB60E9B67D118AACBA9";$/;"	m	class:memanager::TColumn	file:
ascii_fingerprint	gen-cpp/Table_types.cpp	/^const char* TColumnStats::ascii_fingerprint = "D5FF58B203C57D2B1EF98050D612DB56";$/;"	m	class:memanager::TColumnStats	file:
ascii_fingerprint	gen-cpp/Table_types.cpp	/^const char* TTable::ascii_fingerprint = "8F9D83B52B4DC73301968602CA0884AE";$/;"	m	class:memanager::TTable	file:
ascii_fingerprint	gen-cpp/Table_types.cpp	/^const char* TTableStats::ascii_fingerprint = "56A59CE7FFAF82BCA8A19FAACDE4FB75";$/;"	m	class:memanager::TTableStats	file:
ascii_fingerprint	gen-cpp/Table_types.h	/^  static const char* ascii_fingerprint; \/\/ = "46C7DD290D595CB60E9B67D118AACBA9";$/;"	m	class:memanager::TColumn
ascii_fingerprint	gen-cpp/Table_types.h	/^  static const char* ascii_fingerprint; \/\/ = "56A59CE7FFAF82BCA8A19FAACDE4FB75";$/;"	m	class:memanager::TTableStats
ascii_fingerprint	gen-cpp/Table_types.h	/^  static const char* ascii_fingerprint; \/\/ = "8F9D83B52B4DC73301968602CA0884AE";$/;"	m	class:memanager::TTable
ascii_fingerprint	gen-cpp/Table_types.h	/^  static const char* ascii_fingerprint; \/\/ = "D5FF58B203C57D2B1EF98050D612DB56";$/;"	m	class:memanager::TColumnStats
ascii_fingerprint	gen-cpp/Types_types.cpp	/^const char* TColumnType::ascii_fingerprint = "D68013E9233A1A7D7062FA286B362896";$/;"	m	class:memanager::TColumnType	file:
ascii_fingerprint	gen-cpp/Types_types.cpp	/^const char* TNetworkAddress::ascii_fingerprint = "EEBC915CE44901401D881E6091423036";$/;"	m	class:memanager::TNetworkAddress	file:
ascii_fingerprint	gen-cpp/Types_types.cpp	/^const char* TUniqueId::ascii_fingerprint = "F33135321253DAEB67B0E79E416CA831";$/;"	m	class:memanager::TUniqueId	file:
ascii_fingerprint	gen-cpp/Types_types.h	/^  static const char* ascii_fingerprint; \/\/ = "D68013E9233A1A7D7062FA286B362896";$/;"	m	class:memanager::TColumnType
ascii_fingerprint	gen-cpp/Types_types.h	/^  static const char* ascii_fingerprint; \/\/ = "EEBC915CE44901401D881E6091423036";$/;"	m	class:memanager::TNetworkAddress
ascii_fingerprint	gen-cpp/Types_types.h	/^  static const char* ascii_fingerprint; \/\/ = "F33135321253DAEB67B0E79E416CA831";$/;"	m	class:memanager::TUniqueId
avg_size	gen-cpp/Table_types.h	/^  double avg_size;$/;"	m	class:memanager::TColumnStats
binary_fingerprint	gen-cpp/Data_types.cpp	/^const uint8_t TColumnData::binary_fingerprint[16] = {0x2F,0x7A,0x95,0x38,0xDF,0x8A,0x57,0xEF,0x0F,0xF0,0x49,0x50,0xF2,0x97,0x92,0xC2};$/;"	m	class:memanager::TColumnData	file:
binary_fingerprint	gen-cpp/Data_types.cpp	/^const uint8_t TColumnValue::binary_fingerprint[16] = {0x15,0x54,0x3D,0x4A,0xC2,0x3D,0xC1,0x1B,0x82,0x5E,0xEE,0x5A,0x98,0x8F,0x6D,0xEE};$/;"	m	class:memanager::TColumnValue	file:
binary_fingerprint	gen-cpp/Data_types.cpp	/^const uint8_t TResultRow::binary_fingerprint[16] = {0x00,0x10,0xC6,0xF8,0x51,0xB6,0xBC,0x51,0xF3,0x46,0xFD,0xAB,0xAD,0x20,0x69,0x52};$/;"	m	class:memanager::TResultRow	file:
binary_fingerprint	gen-cpp/Data_types.cpp	/^const uint8_t TResultSet::binary_fingerprint[16] = {0x13,0x62,0x71,0x68,0x66,0xA6,0xFE,0xEE,0xE4,0x11,0xC4,0x4C,0x41,0xCC,0x00,0x15};$/;"	m	class:memanager::TResultSet	file:
binary_fingerprint	gen-cpp/Data_types.cpp	/^const uint8_t TResultSetMetadata::binary_fingerprint[16] = {0x98,0x44,0xD6,0x52,0x21,0xB9,0xD9,0x15,0x2C,0x19,0x84,0xB9,0x41,0xD0,0x8B,0xBB};$/;"	m	class:memanager::TResultSetMetadata	file:
binary_fingerprint	gen-cpp/Data_types.cpp	/^const uint8_t TRowBatch::binary_fingerprint[16] = {0xDA,0x73,0x1E,0xC0,0xB9,0xFA,0x69,0xEC,0xC8,0x57,0xFB,0x6D,0x20,0x38,0xC1,0xD3};$/;"	m	class:memanager::TRowBatch	file:
binary_fingerprint	gen-cpp/Data_types.h	/^  static const uint8_t binary_fingerprint[16]; \/\/ = {0x00,0x10,0xC6,0xF8,0x51,0xB6,0xBC,0x51,0xF3,0x46,0xFD,0xAB,0xAD,0x20,0x69,0x52};$/;"	m	class:memanager::TResultRow
binary_fingerprint	gen-cpp/Data_types.h	/^  static const uint8_t binary_fingerprint[16]; \/\/ = {0x13,0x62,0x71,0x68,0x66,0xA6,0xFE,0xEE,0xE4,0x11,0xC4,0x4C,0x41,0xCC,0x00,0x15};$/;"	m	class:memanager::TResultSet
binary_fingerprint	gen-cpp/Data_types.h	/^  static const uint8_t binary_fingerprint[16]; \/\/ = {0x15,0x54,0x3D,0x4A,0xC2,0x3D,0xC1,0x1B,0x82,0x5E,0xEE,0x5A,0x98,0x8F,0x6D,0xEE};$/;"	m	class:memanager::TColumnValue
binary_fingerprint	gen-cpp/Data_types.h	/^  static const uint8_t binary_fingerprint[16]; \/\/ = {0x2F,0x7A,0x95,0x38,0xDF,0x8A,0x57,0xEF,0x0F,0xF0,0x49,0x50,0xF2,0x97,0x92,0xC2};$/;"	m	class:memanager::TColumnData
binary_fingerprint	gen-cpp/Data_types.h	/^  static const uint8_t binary_fingerprint[16]; \/\/ = {0x98,0x44,0xD6,0x52,0x21,0xB9,0xD9,0x15,0x2C,0x19,0x84,0xB9,0x41,0xD0,0x8B,0xBB};$/;"	m	class:memanager::TResultSetMetadata
binary_fingerprint	gen-cpp/Data_types.h	/^  static const uint8_t binary_fingerprint[16]; \/\/ = {0xDA,0x73,0x1E,0xC0,0xB9,0xFA,0x69,0xEC,0xC8,0x57,0xFB,0x6D,0x20,0x38,0xC1,0xD3};$/;"	m	class:memanager::TRowBatch
binary_fingerprint	gen-cpp/Status_types.cpp	/^const uint8_t TStatus::binary_fingerprint[16] = {0xA2,0x2B,0xE3,0xE8,0x46,0x88,0xC9,0xDA,0x4E,0x00,0xCC,0x90,0x2B,0x4E,0xE8,0x18};$/;"	m	class:memanager::TStatus	file:
binary_fingerprint	gen-cpp/Status_types.h	/^  static const uint8_t binary_fingerprint[16]; \/\/ = {0xA2,0x2B,0xE3,0xE8,0x46,0x88,0xC9,0xDA,0x4E,0x00,0xCC,0x90,0x2B,0x4E,0xE8,0x18};$/;"	m	class:memanager::TStatus
binary_fingerprint	gen-cpp/Table_types.cpp	/^const uint8_t TColumn::binary_fingerprint[16] = {0x46,0xC7,0xDD,0x29,0x0D,0x59,0x5C,0xB6,0x0E,0x9B,0x67,0xD1,0x18,0xAA,0xCB,0xA9};$/;"	m	class:memanager::TColumn	file:
binary_fingerprint	gen-cpp/Table_types.cpp	/^const uint8_t TColumnStats::binary_fingerprint[16] = {0xD5,0xFF,0x58,0xB2,0x03,0xC5,0x7D,0x2B,0x1E,0xF9,0x80,0x50,0xD6,0x12,0xDB,0x56};$/;"	m	class:memanager::TColumnStats	file:
binary_fingerprint	gen-cpp/Table_types.cpp	/^const uint8_t TTable::binary_fingerprint[16] = {0x8F,0x9D,0x83,0xB5,0x2B,0x4D,0xC7,0x33,0x01,0x96,0x86,0x02,0xCA,0x08,0x84,0xAE};$/;"	m	class:memanager::TTable	file:
binary_fingerprint	gen-cpp/Table_types.cpp	/^const uint8_t TTableStats::binary_fingerprint[16] = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};$/;"	m	class:memanager::TTableStats	file:
binary_fingerprint	gen-cpp/Table_types.h	/^  static const uint8_t binary_fingerprint[16]; \/\/ = {0x46,0xC7,0xDD,0x29,0x0D,0x59,0x5C,0xB6,0x0E,0x9B,0x67,0xD1,0x18,0xAA,0xCB,0xA9};$/;"	m	class:memanager::TColumn
binary_fingerprint	gen-cpp/Table_types.h	/^  static const uint8_t binary_fingerprint[16]; \/\/ = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};$/;"	m	class:memanager::TTableStats
binary_fingerprint	gen-cpp/Table_types.h	/^  static const uint8_t binary_fingerprint[16]; \/\/ = {0x8F,0x9D,0x83,0xB5,0x2B,0x4D,0xC7,0x33,0x01,0x96,0x86,0x02,0xCA,0x08,0x84,0xAE};$/;"	m	class:memanager::TTable
binary_fingerprint	gen-cpp/Table_types.h	/^  static const uint8_t binary_fingerprint[16]; \/\/ = {0xD5,0xFF,0x58,0xB2,0x03,0xC5,0x7D,0x2B,0x1E,0xF9,0x80,0x50,0xD6,0x12,0xDB,0x56};$/;"	m	class:memanager::TColumnStats
binary_fingerprint	gen-cpp/Types_types.cpp	/^const uint8_t TColumnType::binary_fingerprint[16] = {0xD6,0x80,0x13,0xE9,0x23,0x3A,0x1A,0x7D,0x70,0x62,0xFA,0x28,0x6B,0x36,0x28,0x96};$/;"	m	class:memanager::TColumnType	file:
binary_fingerprint	gen-cpp/Types_types.cpp	/^const uint8_t TNetworkAddress::binary_fingerprint[16] = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};$/;"	m	class:memanager::TNetworkAddress	file:
binary_fingerprint	gen-cpp/Types_types.cpp	/^const uint8_t TUniqueId::binary_fingerprint[16] = {0xF3,0x31,0x35,0x32,0x12,0x53,0xDA,0xEB,0x67,0xB0,0xE7,0x9E,0x41,0x6C,0xA8,0x31};$/;"	m	class:memanager::TUniqueId	file:
binary_fingerprint	gen-cpp/Types_types.h	/^  static const uint8_t binary_fingerprint[16]; \/\/ = {0xD6,0x80,0x13,0xE9,0x23,0x3A,0x1A,0x7D,0x70,0x62,0xFA,0x28,0x6B,0x36,0x28,0x96};$/;"	m	class:memanager::TColumnType
binary_fingerprint	gen-cpp/Types_types.h	/^  static const uint8_t binary_fingerprint[16]; \/\/ = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};$/;"	m	class:memanager::TNetworkAddress
binary_fingerprint	gen-cpp/Types_types.h	/^  static const uint8_t binary_fingerprint[16]; \/\/ = {0xF3,0x31,0x35,0x32,0x12,0x53,0xDA,0xEB,0x67,0xB0,0xE7,0x9E,0x41,0x6C,0xA8,0x31};$/;"	m	class:memanager::TUniqueId
binary_val	gen-cpp/Data_types.h	/^  bool binary_val;$/;"	m	struct:memanager::_TColumnValue__isset
binary_val	gen-cpp/Data_types.h	/^  std::string binary_val;$/;"	m	class:memanager::TColumnValue
binary_vals	gen-cpp/Data_types.h	/^  bool binary_vals;$/;"	m	struct:memanager::_TColumnData__isset
binary_vals	gen-cpp/Data_types.h	/^  std::vector<std::string>  binary_vals;$/;"	m	class:memanager::TColumnData
bool_val	gen-cpp/Data_types.h	/^  bool bool_val;$/;"	m	class:memanager::TColumnValue
bool_val	gen-cpp/Data_types.h	/^  bool bool_val;$/;"	m	struct:memanager::_TColumnValue__isset
bool_vals	gen-cpp/Data_types.h	/^  bool bool_vals;$/;"	m	struct:memanager::_TColumnData__isset
bool_vals	gen-cpp/Data_types.h	/^  std::vector<bool>  bool_vals;$/;"	m	class:memanager::TColumnData
byte_val	gen-cpp/Data_types.h	/^  bool byte_val;$/;"	m	struct:memanager::_TColumnValue__isset
byte_val	gen-cpp/Data_types.h	/^  int8_t byte_val;$/;"	m	class:memanager::TColumnValue
byte_vals	gen-cpp/Data_types.h	/^  bool byte_vals;$/;"	m	struct:memanager::_TColumnData__isset
byte_vals	gen-cpp/Data_types.h	/^  std::vector<int8_t>  byte_vals;$/;"	m	class:memanager::TColumnData
cache_	consistent/hashring.cpp	/^    StringMap cache_;$/;"	m	class:CacheServer	file:
cache_	consistent/hashring_example.cpp	/^	StringMap cache_;$/;"	m	class:CacheServer	file:
clustering_columns	gen-cpp/Table_types.h	/^  bool clustering_columns;$/;"	m	struct:memanager::_TTable__isset
clustering_columns	gen-cpp/Table_types.h	/^  std::vector<TColumn>  clustering_columns;$/;"	m	class:memanager::TTable
colVals	gen-cpp/Data_types.h	/^  bool colVals;$/;"	m	struct:memanager::_TResultRow__isset
colVals	gen-cpp/Data_types.h	/^  std::vector<TColumnValue>  colVals;$/;"	m	class:memanager::TResultRow
col_stats	gen-cpp/Table_types.h	/^  TColumnStats col_stats;$/;"	m	class:memanager::TColumn
col_stats	gen-cpp/Table_types.h	/^  bool col_stats;$/;"	m	struct:memanager::_TColumn__isset
columnName	gen-cpp/Table_types.h	/^  std::string columnName;$/;"	m	class:memanager::TColumn
columnType	gen-cpp/Table_types.h	/^   ::memanager::TColumnType columnType;$/;"	m	class:memanager::TColumn
columns	gen-cpp/Data_types.h	/^  std::vector< ::memanager::TColumn>  columns;$/;"	m	class:memanager::TResultSetMetadata
columns	gen-cpp/Table_types.h	/^  bool columns;$/;"	m	struct:memanager::_TTable__isset
columns	gen-cpp/Table_types.h	/^  std::vector<TColumn>  columns;$/;"	m	class:memanager::TTable
comment	gen-cpp/Table_types.h	/^  bool comment;$/;"	m	struct:memanager::_TColumn__isset
comment	gen-cpp/Table_types.h	/^  std::string comment;$/;"	m	class:memanager::TColumn
createTableMeta	slaver/set_tbmeta.cpp	/^  bool createTableMeta(TTable& tb){$/;"	f	namespace:memanager
dispatchCall	gen-cpp/trans_data.cpp	/^bool trans_dataProcessor::dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) {$/;"	f	class:memanager::trans_dataProcessor
double_val	gen-cpp/Data_types.h	/^  bool double_val;$/;"	m	struct:memanager::_TColumnValue__isset
double_val	gen-cpp/Data_types.h	/^  double double_val;$/;"	m	class:memanager::TColumnValue
double_vals	gen-cpp/Data_types.h	/^  bool double_vals;$/;"	m	struct:memanager::_TColumnData__isset
double_vals	gen-cpp/Data_types.h	/^  std::vector<double>  double_vals;$/;"	m	class:memanager::TColumnData
error_msgs	gen-cpp/Status_types.h	/^  bool error_msgs;$/;"	m	struct:memanager::_TStatus__isset
error_msgs	gen-cpp/Status_types.h	/^  std::vector<std::string>  error_msgs;$/;"	m	class:memanager::TStatus
fileTbMap	master/table_info.h	/^    std::map<string,string> fileTbMap;$/;"	m	class:File_Info
g_Data_constants	gen-cpp/Data_constants.cpp	/^const DataConstants g_Data_constants;$/;"	m	namespace:memanager	file:
g_Status_constants	gen-cpp/Status_constants.cpp	/^const StatusConstants g_Status_constants;$/;"	m	namespace:memanager	file:
g_Table_constants	gen-cpp/Table_constants.cpp	/^const TableConstants g_Table_constants;$/;"	m	namespace:memanager	file:
g_Types_constants	gen-cpp/Types_constants.cpp	/^const TypesConstants g_Types_constants;$/;"	m	namespace:memanager	file:
getHandler	gen-cpp/trans_data.h	/^  virtual trans_dataIf* getHandler(const ::apache::thrift::TConnectionInfo&) {$/;"	f	class:memanager::trans_dataIfSingletonFactory
getInputProtocol	gen-cpp/trans_data.h	/^  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {$/;"	f	class:memanager::trans_dataClient
getOutputProtocol	gen-cpp/trans_data.h	/^  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {$/;"	f	class:memanager::trans_dataClient
getProcessor	gen-cpp/trans_data.cpp	/^::boost::shared_ptr< ::apache::thrift::TProcessor > trans_dataProcessorFactory::getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) {$/;"	f	class:memanager::trans_dataProcessorFactory
handlerFactory_	gen-cpp/trans_data.h	/^  ::boost::shared_ptr< trans_dataIfFactory > handlerFactory_;$/;"	m	class:memanager::trans_dataProcessorFactory
hash_	consistent/consistent.h	/^    struct Hash hash_;$/;"	m	class:Consistent::HashRing	typeref:struct:Consistent::HashRing::Hash
hash_	master/consistent.h	/^    struct Hash hash_;$/;"	m	class:Consistent::HashRing	typeref:struct:Consistent::HashRing::Hash
hi	gen-cpp/Types_types.h	/^  int64_t hi;$/;"	m	class:memanager::TUniqueId
hostname	gen-cpp/Types_types.h	/^  std::string hostname;$/;"	m	class:memanager::TNetworkAddress
id	gen-cpp/Table_types.h	/^   ::memanager::TTableId id;$/;"	m	class:memanager::TTable
id	gen-cpp/Table_types.h	/^  bool id;$/;"	m	struct:memanager::_TTable__isset
iface_	gen-cpp/trans_data.h	/^  boost::shared_ptr<trans_dataIf> iface_;$/;"	m	class:memanager::trans_dataIfSingletonFactory
iface_	gen-cpp/trans_data.h	/^  boost::shared_ptr<trans_dataIf> iface_;$/;"	m	class:memanager::trans_dataProcessor
ifaces_	gen-cpp/trans_data.h	/^  std::vector<boost::shared_ptr<trans_dataIf> > ifaces_;$/;"	m	class:memanager::trans_dataMultiface
int_val	gen-cpp/Data_types.h	/^  bool int_val;$/;"	m	struct:memanager::_TColumnValue__isset
int_val	gen-cpp/Data_types.h	/^  int32_t int_val;$/;"	m	class:memanager::TColumnValue
int_vals	gen-cpp/Data_types.h	/^  bool int_vals;$/;"	m	struct:memanager::_TColumnData__isset
int_vals	gen-cpp/Data_types.h	/^  std::vector<int32_t>  int_vals;$/;"	m	class:memanager::TColumnData
iprot_	gen-cpp/trans_data.h	/^  ::apache::thrift::protocol::TProtocol* iprot_;$/;"	m	class:memanager::trans_dataClient
is_compressed	gen-cpp/Data_types.h	/^  bool is_compressed;$/;"	m	class:memanager::TRowBatch
is_compressed	gen-cpp/Data_types.h	/^  bool is_compressed;$/;"	m	struct:memanager::_TRowBatch__isset
is_null	gen-cpp/Data_types.h	/^  std::vector<bool>  is_null;$/;"	m	class:memanager::TColumnData
len	gen-cpp/Types_types.h	/^  bool len;$/;"	m	struct:memanager::_TColumnType__isset
len	gen-cpp/Types_types.h	/^  int32_t len;$/;"	m	class:memanager::TColumnType
lo	gen-cpp/Types_types.h	/^  int64_t lo;$/;"	m	class:memanager::TUniqueId
load_hdfs	slaver/load_data.cpp	/^  bool load_hdfs(TResultSet& set)$/;"	f	namespace:memanager
load_local	slaver/load_data.cpp	/^  bool load_local(TResultSet& set){$/;"	f	namespace:memanager
load_status	gen-cpp/Table_types.h	/^   ::memanager::TStatus load_status;$/;"	m	class:memanager::TTable
load_status	gen-cpp/Table_types.h	/^  bool load_status;$/;"	m	struct:memanager::_TTable__isset
long_val	gen-cpp/Data_types.h	/^  bool long_val;$/;"	m	struct:memanager::_TColumnValue__isset
long_val	gen-cpp/Data_types.h	/^  int64_t long_val;$/;"	m	class:memanager::TColumnValue
long_vals	gen-cpp/Data_types.h	/^  bool long_vals;$/;"	m	struct:memanager::_TColumnData__isset
long_vals	gen-cpp/Data_types.h	/^  std::vector<int64_t>  long_vals;$/;"	m	class:memanager::TColumnData
main	consistent/hashring.cpp	/^int main(int argc,char*argv[]){$/;"	f
main	consistent/hashring_example.cpp	/^int main()$/;"	f
main	master/master.cpp	/^int main(int argc, char **argv) {$/;"	f
main	master/test/1.cpp	/^int main(int argc,char* argv[])$/;"	f
main	slaver/slaver.cpp	/^int main(int argc, char **argv) {$/;"	f
max_size	gen-cpp/Table_types.h	/^  int64_t max_size;$/;"	m	class:memanager::TColumnStats
memanager	gen-cpp/Data_constants.cpp	/^namespace memanager {$/;"	n	file:
memanager	gen-cpp/Data_constants.h	/^namespace memanager {$/;"	n
memanager	gen-cpp/Data_types.cpp	/^namespace memanager {$/;"	n	file:
memanager	gen-cpp/Data_types.h	/^namespace memanager {$/;"	n
memanager	gen-cpp/Status_constants.cpp	/^namespace memanager {$/;"	n	file:
memanager	gen-cpp/Status_constants.h	/^namespace memanager {$/;"	n
memanager	gen-cpp/Status_types.cpp	/^namespace memanager {$/;"	n	file:
memanager	gen-cpp/Status_types.h	/^namespace memanager {$/;"	n
memanager	gen-cpp/Table_constants.cpp	/^namespace memanager {$/;"	n	file:
memanager	gen-cpp/Table_constants.h	/^namespace memanager {$/;"	n
memanager	gen-cpp/Table_types.cpp	/^namespace memanager {$/;"	n	file:
memanager	gen-cpp/Table_types.h	/^namespace memanager {$/;"	n
memanager	gen-cpp/Types_constants.cpp	/^namespace memanager {$/;"	n	file:
memanager	gen-cpp/Types_constants.h	/^namespace memanager {$/;"	n
memanager	gen-cpp/Types_types.cpp	/^namespace memanager {$/;"	n	file:
memanager	gen-cpp/Types_types.h	/^namespace memanager {$/;"	n
memanager	gen-cpp/trans_data.cpp	/^namespace memanager {$/;"	n	file:
memanager	gen-cpp/trans_data.h	/^namespace memanager {$/;"	n
memanager	master/print_data.cpp	/^namespace memanager{$/;"	n	file:
memanager	master/print_data.h	/^namespace memanager{$/;"	n
memanager	slaver/load_data.cpp	/^namespace memanager{$/;"	n	file:
memanager	slaver/load_data.h	/^namespace memanager{$/;"	n
memanager	slaver/set_tbmeta.cpp	/^namespace memanager{$/;"	n	file:
memanager	slaver/set_tbmeta.h	/^namespace memanager{$/;"	n
num_distinct_values	gen-cpp/Table_types.h	/^  int64_t num_distinct_values;$/;"	m	class:memanager::TColumnStats
num_nulls	gen-cpp/Table_types.h	/^  int64_t num_nulls;$/;"	m	class:memanager::TColumnStats
num_rows	gen-cpp/Data_types.h	/^  int32_t num_rows;$/;"	m	class:memanager::TRowBatch
num_rows	gen-cpp/Table_types.h	/^  int64_t num_rows;$/;"	m	class:memanager::TTableStats
operator !=	gen-cpp/Data_types.h	/^  bool operator != (const TColumnData &rhs) const {$/;"	f	class:memanager::TColumnData
operator !=	gen-cpp/Data_types.h	/^  bool operator != (const TColumnValue &rhs) const {$/;"	f	class:memanager::TColumnValue
operator !=	gen-cpp/Data_types.h	/^  bool operator != (const TResultRow &rhs) const {$/;"	f	class:memanager::TResultRow
operator !=	gen-cpp/Data_types.h	/^  bool operator != (const TResultSet &rhs) const {$/;"	f	class:memanager::TResultSet
operator !=	gen-cpp/Data_types.h	/^  bool operator != (const TResultSetMetadata &rhs) const {$/;"	f	class:memanager::TResultSetMetadata
operator !=	gen-cpp/Data_types.h	/^  bool operator != (const TRowBatch &rhs) const {$/;"	f	class:memanager::TRowBatch
operator !=	gen-cpp/Status_types.h	/^  bool operator != (const TStatus &rhs) const {$/;"	f	class:memanager::TStatus
operator !=	gen-cpp/Table_types.h	/^  bool operator != (const TColumn &rhs) const {$/;"	f	class:memanager::TColumn
operator !=	gen-cpp/Table_types.h	/^  bool operator != (const TColumnStats &rhs) const {$/;"	f	class:memanager::TColumnStats
operator !=	gen-cpp/Table_types.h	/^  bool operator != (const TTable &rhs) const {$/;"	f	class:memanager::TTable
operator !=	gen-cpp/Table_types.h	/^  bool operator != (const TTableStats &rhs) const {$/;"	f	class:memanager::TTableStats
operator !=	gen-cpp/Types_types.h	/^  bool operator != (const TColumnType &rhs) const {$/;"	f	class:memanager::TColumnType
operator !=	gen-cpp/Types_types.h	/^  bool operator != (const TNetworkAddress &rhs) const {$/;"	f	class:memanager::TNetworkAddress
operator !=	gen-cpp/Types_types.h	/^  bool operator != (const TUniqueId &rhs) const {$/;"	f	class:memanager::TUniqueId
operator !=	gen-cpp/trans_data.h	/^  bool operator != (const trans_data_trans_data_args &rhs) const {$/;"	f	class:memanager::trans_data_trans_data_args
operator !=	gen-cpp/trans_data.h	/^  bool operator != (const trans_data_trans_data_result &rhs) const {$/;"	f	class:memanager::trans_data_trans_data_result
operator ()	consistent/consistent.h	/^      size_t operator()(const std::string& data) const$/;"	f	struct:Consistent::Hash
operator ()	consistent/hashring_example.cpp	/^	size_t operator()(const char * str) const$/;"	f	struct:SdbmHash
operator ()	master/consistent.h	/^      size_t operator()(const std::string& data) const$/;"	f	struct:Consistent::Hash
operator ==	gen-cpp/Data_types.h	/^  bool operator == (const TColumnData & rhs) const$/;"	f	class:memanager::TColumnData
operator ==	gen-cpp/Data_types.h	/^  bool operator == (const TColumnValue & rhs) const$/;"	f	class:memanager::TColumnValue
operator ==	gen-cpp/Data_types.h	/^  bool operator == (const TResultRow & rhs) const$/;"	f	class:memanager::TResultRow
operator ==	gen-cpp/Data_types.h	/^  bool operator == (const TResultSet & rhs) const$/;"	f	class:memanager::TResultSet
operator ==	gen-cpp/Data_types.h	/^  bool operator == (const TResultSetMetadata & rhs) const$/;"	f	class:memanager::TResultSetMetadata
operator ==	gen-cpp/Data_types.h	/^  bool operator == (const TRowBatch & rhs) const$/;"	f	class:memanager::TRowBatch
operator ==	gen-cpp/Status_types.h	/^  bool operator == (const TStatus & rhs) const$/;"	f	class:memanager::TStatus
operator ==	gen-cpp/Table_types.h	/^  bool operator == (const TColumn & rhs) const$/;"	f	class:memanager::TColumn
operator ==	gen-cpp/Table_types.h	/^  bool operator == (const TColumnStats & rhs) const$/;"	f	class:memanager::TColumnStats
operator ==	gen-cpp/Table_types.h	/^  bool operator == (const TTable & rhs) const$/;"	f	class:memanager::TTable
operator ==	gen-cpp/Table_types.h	/^  bool operator == (const TTableStats & rhs) const$/;"	f	class:memanager::TTableStats
operator ==	gen-cpp/Types_types.h	/^  bool operator == (const TColumnType & rhs) const$/;"	f	class:memanager::TColumnType
operator ==	gen-cpp/Types_types.h	/^  bool operator == (const TNetworkAddress & rhs) const$/;"	f	class:memanager::TNetworkAddress
operator ==	gen-cpp/Types_types.h	/^  bool operator == (const TUniqueId & rhs) const$/;"	f	class:memanager::TUniqueId
operator ==	gen-cpp/trans_data.h	/^  bool operator == (const trans_data_trans_data_args & rhs) const$/;"	f	class:memanager::trans_data_trans_data_args
operator ==	gen-cpp/trans_data.h	/^  bool operator == (const trans_data_trans_data_result & \/* rhs *\/) const$/;"	f	class:memanager::trans_data_trans_data_result
oprot_	gen-cpp/trans_data.h	/^  ::apache::thrift::protocol::TProtocol* oprot_;$/;"	m	class:memanager::trans_dataClient
piprot_	gen-cpp/trans_data.h	/^  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;$/;"	m	class:memanager::trans_dataClient
poprot_	gen-cpp/trans_data.h	/^  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;$/;"	m	class:memanager::trans_dataClient
port	gen-cpp/Types_types.h	/^  int32_t port;$/;"	m	class:memanager::TNetworkAddress
position	gen-cpp/Table_types.h	/^  bool position;$/;"	m	struct:memanager::_TColumn__isset
position	gen-cpp/Table_types.h	/^  int32_t position;$/;"	m	class:memanager::TColumn
precision	gen-cpp/Types_types.h	/^  bool precision;$/;"	m	struct:memanager::_TColumnType__isset
precision	gen-cpp/Types_types.h	/^  int32_t precision;$/;"	m	class:memanager::TColumnType
printTableMeta	master/print_data.cpp	/^  bool printTableMeta(TResultSet& set,$/;"	f	namespace:memanager
printTableRow	master/print_data.cpp	/^  bool printTableRow(TResultSet& set){$/;"	f	namespace:memanager
processMap_	gen-cpp/trans_data.h	/^  ProcessMap processMap_;$/;"	m	class:memanager::trans_dataProcessor
process_trans_data	gen-cpp/trans_data.cpp	/^void trans_dataProcessor::process_trans_data(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)$/;"	f	class:memanager::trans_dataProcessor
read	gen-cpp/Data_types.cpp	/^uint32_t TColumnData::read(::apache::thrift::protocol::TProtocol* iprot) {$/;"	f	class:memanager::TColumnData
read	gen-cpp/Data_types.cpp	/^uint32_t TColumnValue::read(::apache::thrift::protocol::TProtocol* iprot) {$/;"	f	class:memanager::TColumnValue
read	gen-cpp/Data_types.cpp	/^uint32_t TResultRow::read(::apache::thrift::protocol::TProtocol* iprot) {$/;"	f	class:memanager::TResultRow
read	gen-cpp/Data_types.cpp	/^uint32_t TResultSet::read(::apache::thrift::protocol::TProtocol* iprot) {$/;"	f	class:memanager::TResultSet
read	gen-cpp/Data_types.cpp	/^uint32_t TResultSetMetadata::read(::apache::thrift::protocol::TProtocol* iprot) {$/;"	f	class:memanager::TResultSetMetadata
read	gen-cpp/Data_types.cpp	/^uint32_t TRowBatch::read(::apache::thrift::protocol::TProtocol* iprot) {$/;"	f	class:memanager::TRowBatch
read	gen-cpp/Status_types.cpp	/^uint32_t TStatus::read(::apache::thrift::protocol::TProtocol* iprot) {$/;"	f	class:memanager::TStatus
read	gen-cpp/Table_types.cpp	/^uint32_t TColumn::read(::apache::thrift::protocol::TProtocol* iprot) {$/;"	f	class:memanager::TColumn
read	gen-cpp/Table_types.cpp	/^uint32_t TColumnStats::read(::apache::thrift::protocol::TProtocol* iprot) {$/;"	f	class:memanager::TColumnStats
read	gen-cpp/Table_types.cpp	/^uint32_t TTable::read(::apache::thrift::protocol::TProtocol* iprot) {$/;"	f	class:memanager::TTable
read	gen-cpp/Table_types.cpp	/^uint32_t TTableStats::read(::apache::thrift::protocol::TProtocol* iprot) {$/;"	f	class:memanager::TTableStats
read	gen-cpp/Types_types.cpp	/^uint32_t TColumnType::read(::apache::thrift::protocol::TProtocol* iprot) {$/;"	f	class:memanager::TColumnType
read	gen-cpp/Types_types.cpp	/^uint32_t TNetworkAddress::read(::apache::thrift::protocol::TProtocol* iprot) {$/;"	f	class:memanager::TNetworkAddress
read	gen-cpp/Types_types.cpp	/^uint32_t TUniqueId::read(::apache::thrift::protocol::TProtocol* iprot) {$/;"	f	class:memanager::TUniqueId
read	gen-cpp/trans_data.cpp	/^uint32_t trans_data_trans_data_args::read(::apache::thrift::protocol::TProtocol* iprot) {$/;"	f	class:memanager::trans_data_trans_data_args
read	gen-cpp/trans_data.cpp	/^uint32_t trans_data_trans_data_presult::read(::apache::thrift::protocol::TProtocol* iprot) {$/;"	f	class:memanager::trans_data_trans_data_presult
read	gen-cpp/trans_data.cpp	/^uint32_t trans_data_trans_data_result::read(::apache::thrift::protocol::TProtocol* iprot) {$/;"	f	class:memanager::trans_data_trans_data_result
recv_trans_data	gen-cpp/trans_data.cpp	/^void trans_dataClient::recv_trans_data()$/;"	f	class:memanager::trans_dataClient
releaseHandler	gen-cpp/trans_data.h	/^  virtual void releaseHandler(trans_dataIf* \/* handler *\/) {}$/;"	f	class:memanager::trans_dataIfSingletonFactory
replicas_	consistent/consistent.h	/^    const unsigned int replicas_;$/;"	m	class:Consistent::HashRing
replicas_	master/consistent.h	/^    const unsigned int replicas_;$/;"	m	class:Consistent::HashRing
resultSet	gen-cpp/trans_data.h	/^  TResultSet resultSet;$/;"	m	class:memanager::trans_data_trans_data_args
resultSet	gen-cpp/trans_data.h	/^  bool resultSet;$/;"	m	struct:memanager::_trans_data_trans_data_args__isset
resultSet	gen-cpp/trans_data.h	/^  const TResultSet* resultSet;$/;"	m	class:memanager::trans_data_trans_data_pargs
ring_	consistent/consistent.h	/^    NodeMap ring_;$/;"	m	class:Consistent::HashRing
ring_	master/consistent.h	/^    NodeMap ring_;$/;"	m	class:Consistent::HashRing
row_tuples	gen-cpp/Data_types.h	/^  std::vector< ::memanager::TTupleId>  row_tuples;$/;"	m	class:memanager::TRowBatch
rows	gen-cpp/Data_types.h	/^  std::vector<TResultRow>  rows;$/;"	m	class:memanager::TResultSet
scale	gen-cpp/Types_types.h	/^  bool scale;$/;"	m	struct:memanager::_TColumnType__isset
scale	gen-cpp/Types_types.h	/^  int32_t scale;$/;"	m	class:memanager::TColumnType
schema	gen-cpp/Data_types.h	/^  TResultSetMetadata schema;$/;"	m	class:memanager::TResultSet
send_trans_data	gen-cpp/trans_data.cpp	/^void trans_dataClient::send_trans_data(const TResultSet& resultSet, const  ::memanager::TTable& tb)$/;"	f	class:memanager::trans_dataClient
setSchema	slaver/set_tbmeta.cpp	/^  bool setSchema(TResultSet& set,$/;"	f	namespace:memanager
short_val	gen-cpp/Data_types.h	/^  bool short_val;$/;"	m	struct:memanager::_TColumnValue__isset
short_val	gen-cpp/Data_types.h	/^  int16_t short_val;$/;"	m	class:memanager::TColumnValue
short_vals	gen-cpp/Data_types.h	/^  bool short_vals;$/;"	m	struct:memanager::_TColumnData__isset
short_vals	gen-cpp/Data_types.h	/^  std::vector<int16_t>  short_vals;$/;"	m	class:memanager::TColumnData
status_code	gen-cpp/Status_types.h	/^  TStatusCode::type status_code;$/;"	m	class:memanager::TStatus
string_val	gen-cpp/Data_types.h	/^  bool string_val;$/;"	m	struct:memanager::_TColumnValue__isset
string_val	gen-cpp/Data_types.h	/^  std::string string_val;$/;"	m	class:memanager::TColumnValue
string_vals	gen-cpp/Data_types.h	/^  bool string_vals;$/;"	m	struct:memanager::_TColumnData__isset
string_vals	gen-cpp/Data_types.h	/^  std::vector<std::string>  string_vals;$/;"	m	class:memanager::TColumnData
swap	gen-cpp/Data_types.cpp	/^void swap(TColumnData &a, TColumnData &b) {$/;"	f	namespace:memanager
swap	gen-cpp/Data_types.cpp	/^void swap(TColumnValue &a, TColumnValue &b) {$/;"	f	namespace:memanager
swap	gen-cpp/Data_types.cpp	/^void swap(TResultRow &a, TResultRow &b) {$/;"	f	namespace:memanager
swap	gen-cpp/Data_types.cpp	/^void swap(TResultSet &a, TResultSet &b) {$/;"	f	namespace:memanager
swap	gen-cpp/Data_types.cpp	/^void swap(TResultSetMetadata &a, TResultSetMetadata &b) {$/;"	f	namespace:memanager
swap	gen-cpp/Data_types.cpp	/^void swap(TRowBatch &a, TRowBatch &b) {$/;"	f	namespace:memanager
swap	gen-cpp/Status_types.cpp	/^void swap(TStatus &a, TStatus &b) {$/;"	f	namespace:memanager
swap	gen-cpp/Table_types.cpp	/^void swap(TColumn &a, TColumn &b) {$/;"	f	namespace:memanager
swap	gen-cpp/Table_types.cpp	/^void swap(TColumnStats &a, TColumnStats &b) {$/;"	f	namespace:memanager
swap	gen-cpp/Table_types.cpp	/^void swap(TTable &a, TTable &b) {$/;"	f	namespace:memanager
swap	gen-cpp/Table_types.cpp	/^void swap(TTableStats &a, TTableStats &b) {$/;"	f	namespace:memanager
swap	gen-cpp/Types_types.cpp	/^void swap(TColumnType &a, TColumnType &b) {$/;"	f	namespace:memanager
swap	gen-cpp/Types_types.cpp	/^void swap(TNetworkAddress &a, TNetworkAddress &b) {$/;"	f	namespace:memanager
swap	gen-cpp/Types_types.cpp	/^void swap(TUniqueId &a, TUniqueId &b) {$/;"	f	namespace:memanager
table_stats	gen-cpp/Table_types.h	/^  TTableStats table_stats;$/;"	m	class:memanager::TTable
table_stats	gen-cpp/Table_types.h	/^  bool table_stats;$/;"	m	struct:memanager::_TTable__isset
tb	gen-cpp/trans_data.h	/^   ::memanager::TTable tb;$/;"	m	class:memanager::trans_data_trans_data_args
tb	gen-cpp/trans_data.h	/^  bool tb;$/;"	m	struct:memanager::_trans_data_trans_data_args__isset
tb	gen-cpp/trans_data.h	/^  const  ::memanager::TTable* tb;$/;"	m	class:memanager::trans_data_trans_data_pargs
tbl_name	gen-cpp/Table_types.h	/^  std::string tbl_name;$/;"	m	class:memanager::TTable
trans_data	gen-cpp/trans_data.cpp	/^void trans_dataClient::trans_data(const TResultSet& resultSet, const  ::memanager::TTable& tb)$/;"	f	class:memanager::trans_dataClient
trans_data	gen-cpp/trans_data.h	/^  void trans_data(const TResultSet& \/* resultSet *\/, const  ::memanager::TTable& \/* tb *\/) {$/;"	f	class:memanager::trans_dataNull
trans_data	gen-cpp/trans_data.h	/^  void trans_data(const TResultSet& resultSet, const  ::memanager::TTable& tb) {$/;"	f	class:memanager::trans_dataMultiface
trans_data	master/master.cpp	/^  void trans_data(const TResultSet& resultSet, const TTable& tb) {$/;"	f	class:trans_dataHandler
trans_dataClient	gen-cpp/trans_data.h	/^  trans_dataClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :$/;"	f	class:memanager::trans_dataClient
trans_dataClient	gen-cpp/trans_data.h	/^  trans_dataClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :$/;"	f	class:memanager::trans_dataClient
trans_dataClient	gen-cpp/trans_data.h	/^class trans_dataClient : virtual public trans_dataIf {$/;"	c	namespace:memanager
trans_dataHandler	master/master.cpp	/^  trans_dataHandler() {  }$/;"	f	class:trans_dataHandler
trans_dataHandler	master/master.cpp	/^class trans_dataHandler : virtual public trans_dataIf {$/;"	c	file:
trans_dataIf	gen-cpp/trans_data.h	/^class trans_dataIf {$/;"	c	namespace:memanager
trans_dataIfFactory	gen-cpp/trans_data.h	/^class trans_dataIfFactory {$/;"	c	namespace:memanager
trans_dataIfSingletonFactory	gen-cpp/trans_data.h	/^  trans_dataIfSingletonFactory(const boost::shared_ptr<trans_dataIf>& iface) : iface_(iface) {}$/;"	f	class:memanager::trans_dataIfSingletonFactory
trans_dataIfSingletonFactory	gen-cpp/trans_data.h	/^class trans_dataIfSingletonFactory : virtual public trans_dataIfFactory {$/;"	c	namespace:memanager
trans_dataMultiface	gen-cpp/trans_data.h	/^  trans_dataMultiface() {}$/;"	f	class:memanager::trans_dataMultiface
trans_dataMultiface	gen-cpp/trans_data.h	/^  trans_dataMultiface(std::vector<boost::shared_ptr<trans_dataIf> >& ifaces) : ifaces_(ifaces) {$/;"	f	class:memanager::trans_dataMultiface
trans_dataMultiface	gen-cpp/trans_data.h	/^class trans_dataMultiface : virtual public trans_dataIf {$/;"	c	namespace:memanager
trans_dataNull	gen-cpp/trans_data.h	/^class trans_dataNull : virtual public trans_dataIf {$/;"	c	namespace:memanager
trans_dataProcessor	gen-cpp/trans_data.h	/^  trans_dataProcessor(boost::shared_ptr<trans_dataIf> iface) :$/;"	f	class:memanager::trans_dataProcessor
trans_dataProcessor	gen-cpp/trans_data.h	/^class trans_dataProcessor : public ::apache::thrift::TDispatchProcessor {$/;"	c	namespace:memanager
trans_dataProcessorFactory	gen-cpp/trans_data.h	/^  trans_dataProcessorFactory(const ::boost::shared_ptr< trans_dataIfFactory >& handlerFactory) :$/;"	f	class:memanager::trans_dataProcessorFactory
trans_dataProcessorFactory	gen-cpp/trans_data.h	/^class trans_dataProcessorFactory : public ::apache::thrift::TProcessorFactory {$/;"	c	namespace:memanager
trans_data_H	gen-cpp/trans_data.h	8;"	d
trans_data_trans_data_args	gen-cpp/trans_data.h	/^  trans_data_trans_data_args() {$/;"	f	class:memanager::trans_data_trans_data_args
trans_data_trans_data_args	gen-cpp/trans_data.h	/^class trans_data_trans_data_args {$/;"	c	namespace:memanager
trans_data_trans_data_pargs	gen-cpp/trans_data.h	/^class trans_data_trans_data_pargs {$/;"	c	namespace:memanager
trans_data_trans_data_presult	gen-cpp/trans_data.h	/^class trans_data_trans_data_presult {$/;"	c	namespace:memanager
trans_data_trans_data_result	gen-cpp/trans_data.h	/^  trans_data_trans_data_result() {$/;"	f	class:memanager::trans_data_trans_data_result
trans_data_trans_data_result	gen-cpp/trans_data.h	/^class trans_data_trans_data_result {$/;"	c	namespace:memanager
tuple_data	gen-cpp/Data_types.h	/^  bool tuple_data;$/;"	m	struct:memanager::_TRowBatch__isset
tuple_data	gen-cpp/Data_types.h	/^  std::string tuple_data;$/;"	m	class:memanager::TRowBatch
tuple_offsets	gen-cpp/Data_types.h	/^  bool tuple_offsets;$/;"	m	struct:memanager::_TRowBatch__isset
tuple_offsets	gen-cpp/Data_types.h	/^  std::vector<int32_t>  tuple_offsets;$/;"	m	class:memanager::TRowBatch
type	gen-cpp/Status_types.h	/^  enum type {$/;"	g	struct:memanager::TStatusCode
type	gen-cpp/Table_types.h	/^  enum type {$/;"	g	struct:memanager::TAccessLevel
type	gen-cpp/Types_types.h	/^  TPrimitiveType::type type;$/;"	m	class:memanager::TColumnType
type	gen-cpp/Types_types.h	/^  enum type {$/;"	g	struct:memanager::TExplainLevel
type	gen-cpp/Types_types.h	/^  enum type {$/;"	g	struct:memanager::TPrimitiveType
write	gen-cpp/Data_types.cpp	/^uint32_t TColumnData::write(::apache::thrift::protocol::TProtocol* oprot) const {$/;"	f	class:memanager::TColumnData
write	gen-cpp/Data_types.cpp	/^uint32_t TColumnValue::write(::apache::thrift::protocol::TProtocol* oprot) const {$/;"	f	class:memanager::TColumnValue
write	gen-cpp/Data_types.cpp	/^uint32_t TResultRow::write(::apache::thrift::protocol::TProtocol* oprot) const {$/;"	f	class:memanager::TResultRow
write	gen-cpp/Data_types.cpp	/^uint32_t TResultSet::write(::apache::thrift::protocol::TProtocol* oprot) const {$/;"	f	class:memanager::TResultSet
write	gen-cpp/Data_types.cpp	/^uint32_t TResultSetMetadata::write(::apache::thrift::protocol::TProtocol* oprot) const {$/;"	f	class:memanager::TResultSetMetadata
write	gen-cpp/Data_types.cpp	/^uint32_t TRowBatch::write(::apache::thrift::protocol::TProtocol* oprot) const {$/;"	f	class:memanager::TRowBatch
write	gen-cpp/Status_types.cpp	/^uint32_t TStatus::write(::apache::thrift::protocol::TProtocol* oprot) const {$/;"	f	class:memanager::TStatus
write	gen-cpp/Table_types.cpp	/^uint32_t TColumn::write(::apache::thrift::protocol::TProtocol* oprot) const {$/;"	f	class:memanager::TColumn
write	gen-cpp/Table_types.cpp	/^uint32_t TColumnStats::write(::apache::thrift::protocol::TProtocol* oprot) const {$/;"	f	class:memanager::TColumnStats
write	gen-cpp/Table_types.cpp	/^uint32_t TTable::write(::apache::thrift::protocol::TProtocol* oprot) const {$/;"	f	class:memanager::TTable
write	gen-cpp/Table_types.cpp	/^uint32_t TTableStats::write(::apache::thrift::protocol::TProtocol* oprot) const {$/;"	f	class:memanager::TTableStats
write	gen-cpp/Types_types.cpp	/^uint32_t TColumnType::write(::apache::thrift::protocol::TProtocol* oprot) const {$/;"	f	class:memanager::TColumnType
write	gen-cpp/Types_types.cpp	/^uint32_t TNetworkAddress::write(::apache::thrift::protocol::TProtocol* oprot) const {$/;"	f	class:memanager::TNetworkAddress
write	gen-cpp/Types_types.cpp	/^uint32_t TUniqueId::write(::apache::thrift::protocol::TProtocol* oprot) const {$/;"	f	class:memanager::TUniqueId
write	gen-cpp/trans_data.cpp	/^uint32_t trans_data_trans_data_args::write(::apache::thrift::protocol::TProtocol* oprot) const {$/;"	f	class:memanager::trans_data_trans_data_args
write	gen-cpp/trans_data.cpp	/^uint32_t trans_data_trans_data_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {$/;"	f	class:memanager::trans_data_trans_data_pargs
write	gen-cpp/trans_data.cpp	/^uint32_t trans_data_trans_data_result::write(::apache::thrift::protocol::TProtocol* oprot) const {$/;"	f	class:memanager::trans_data_trans_data_result
~TColumn	gen-cpp/Table_types.h	/^  virtual ~TColumn() throw() {}$/;"	f	class:memanager::TColumn
~TColumnData	gen-cpp/Data_types.h	/^  virtual ~TColumnData() throw() {}$/;"	f	class:memanager::TColumnData
~TColumnStats	gen-cpp/Table_types.h	/^  virtual ~TColumnStats() throw() {}$/;"	f	class:memanager::TColumnStats
~TColumnType	gen-cpp/Types_types.h	/^  virtual ~TColumnType() throw() {}$/;"	f	class:memanager::TColumnType
~TColumnValue	gen-cpp/Data_types.h	/^  virtual ~TColumnValue() throw() {}$/;"	f	class:memanager::TColumnValue
~TNetworkAddress	gen-cpp/Types_types.h	/^  virtual ~TNetworkAddress() throw() {}$/;"	f	class:memanager::TNetworkAddress
~TResultRow	gen-cpp/Data_types.h	/^  virtual ~TResultRow() throw() {}$/;"	f	class:memanager::TResultRow
~TResultSet	gen-cpp/Data_types.h	/^  virtual ~TResultSet() throw() {}$/;"	f	class:memanager::TResultSet
~TResultSetMetadata	gen-cpp/Data_types.h	/^  virtual ~TResultSetMetadata() throw() {}$/;"	f	class:memanager::TResultSetMetadata
~TRowBatch	gen-cpp/Data_types.h	/^  virtual ~TRowBatch() throw() {}$/;"	f	class:memanager::TRowBatch
~TStatus	gen-cpp/Status_types.h	/^  virtual ~TStatus() throw() {}$/;"	f	class:memanager::TStatus
~TTable	gen-cpp/Table_types.h	/^  virtual ~TTable() throw() {}$/;"	f	class:memanager::TTable
~TTableStats	gen-cpp/Table_types.h	/^  virtual ~TTableStats() throw() {}$/;"	f	class:memanager::TTableStats
~TUniqueId	gen-cpp/Types_types.h	/^  virtual ~TUniqueId() throw() {}$/;"	f	class:memanager::TUniqueId
~trans_dataIf	gen-cpp/trans_data.h	/^  virtual ~trans_dataIf() {}$/;"	f	class:memanager::trans_dataIf
~trans_dataIfFactory	gen-cpp/trans_data.h	/^  virtual ~trans_dataIfFactory() {}$/;"	f	class:memanager::trans_dataIfFactory
~trans_dataIfSingletonFactory	gen-cpp/trans_data.h	/^  virtual ~trans_dataIfSingletonFactory() {}$/;"	f	class:memanager::trans_dataIfSingletonFactory
~trans_dataMultiface	gen-cpp/trans_data.h	/^  virtual ~trans_dataMultiface() {}$/;"	f	class:memanager::trans_dataMultiface
~trans_dataNull	gen-cpp/trans_data.h	/^  virtual ~trans_dataNull() {}$/;"	f	class:memanager::trans_dataNull
~trans_dataProcessor	gen-cpp/trans_data.h	/^  virtual ~trans_dataProcessor() {}$/;"	f	class:memanager::trans_dataProcessor
~trans_data_trans_data_args	gen-cpp/trans_data.h	/^  virtual ~trans_data_trans_data_args() throw() {}$/;"	f	class:memanager::trans_data_trans_data_args
~trans_data_trans_data_pargs	gen-cpp/trans_data.h	/^  virtual ~trans_data_trans_data_pargs() throw() {}$/;"	f	class:memanager::trans_data_trans_data_pargs
~trans_data_trans_data_presult	gen-cpp/trans_data.h	/^  virtual ~trans_data_trans_data_presult() throw() {}$/;"	f	class:memanager::trans_data_trans_data_presult
~trans_data_trans_data_result	gen-cpp/trans_data.h	/^  virtual ~trans_data_trans_data_result() throw() {}$/;"	f	class:memanager::trans_data_trans_data_result
