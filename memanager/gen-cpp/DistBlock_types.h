/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef DistBlock_TYPES_H
#define DistBlock_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace memanager {


class blockInfo {
 public:

  static const char* ascii_fingerprint; // = "A8A6BEAE03204D142B807E866EFAC13F";
  static const uint8_t binary_fingerprint[16]; // = {0xA8,0xA6,0xBE,0xAE,0x03,0x20,0x4D,0x14,0x2B,0x80,0x7E,0x86,0x6E,0xFA,0xC1,0x3F};

  blockInfo() : filePath(), offset(0), blockSize(0), storeHost() {
  }

  virtual ~blockInfo() throw() {}

  std::string filePath;
  int32_t offset;
  int64_t blockSize;
  std::string storeHost;

  void __set_filePath(const std::string& val) {
    filePath = val;
  }

  void __set_offset(const int32_t val) {
    offset = val;
  }

  void __set_blockSize(const int64_t val) {
    blockSize = val;
  }

  void __set_storeHost(const std::string& val) {
    storeHost = val;
  }

  bool operator == (const blockInfo & rhs) const
  {
    if (!(filePath == rhs.filePath))
      return false;
    if (!(offset == rhs.offset))
      return false;
    if (!(blockSize == rhs.blockSize))
      return false;
    if (!(storeHost == rhs.storeHost))
      return false;
    return true;
  }
  bool operator != (const blockInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const blockInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(blockInfo &a, blockInfo &b);

} // namespace

#endif
