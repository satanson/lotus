/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef trans_blockInfo_H
#define trans_blockInfo_H

#include <thrift/TDispatchProcessor.h>
#include "DistBlock_types.h"

namespace memanager {

class trans_blockInfoIf {
 public:
  virtual ~trans_blockInfoIf() {}
  virtual void trans_blockInfo(const blockInfo& block) = 0;
};

class trans_blockInfoIfFactory {
 public:
  typedef trans_blockInfoIf Handler;

  virtual ~trans_blockInfoIfFactory() {}

  virtual trans_blockInfoIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(trans_blockInfoIf* /* handler */) = 0;
};

class trans_blockInfoIfSingletonFactory : virtual public trans_blockInfoIfFactory {
 public:
  trans_blockInfoIfSingletonFactory(const boost::shared_ptr<trans_blockInfoIf>& iface) : iface_(iface) {}
  virtual ~trans_blockInfoIfSingletonFactory() {}

  virtual trans_blockInfoIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(trans_blockInfoIf* /* handler */) {}

 protected:
  boost::shared_ptr<trans_blockInfoIf> iface_;
};

class trans_blockInfoNull : virtual public trans_blockInfoIf {
 public:
  virtual ~trans_blockInfoNull() {}
  void trans_blockInfo(const blockInfo& /* block */) {
    return;
  }
};

typedef struct _trans_blockInfo_trans_blockInfo_args__isset {
  _trans_blockInfo_trans_blockInfo_args__isset() : block(false) {}
  bool block;
} _trans_blockInfo_trans_blockInfo_args__isset;

class trans_blockInfo_trans_blockInfo_args {
 public:

  trans_blockInfo_trans_blockInfo_args() {
  }

  virtual ~trans_blockInfo_trans_blockInfo_args() throw() {}

  blockInfo block;

  _trans_blockInfo_trans_blockInfo_args__isset __isset;

  void __set_block(const blockInfo& val) {
    block = val;
  }

  bool operator == (const trans_blockInfo_trans_blockInfo_args & rhs) const
  {
    if (!(block == rhs.block))
      return false;
    return true;
  }
  bool operator != (const trans_blockInfo_trans_blockInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const trans_blockInfo_trans_blockInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class trans_blockInfo_trans_blockInfo_pargs {
 public:


  virtual ~trans_blockInfo_trans_blockInfo_pargs() throw() {}

  const blockInfo* block;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class trans_blockInfo_trans_blockInfo_result {
 public:

  trans_blockInfo_trans_blockInfo_result() {
  }

  virtual ~trans_blockInfo_trans_blockInfo_result() throw() {}


  bool operator == (const trans_blockInfo_trans_blockInfo_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const trans_blockInfo_trans_blockInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const trans_blockInfo_trans_blockInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class trans_blockInfo_trans_blockInfo_presult {
 public:


  virtual ~trans_blockInfo_trans_blockInfo_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class trans_blockInfoClient : virtual public trans_blockInfoIf {
 public:
  trans_blockInfoClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  trans_blockInfoClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void trans_blockInfo(const blockInfo& block);
  void send_trans_blockInfo(const blockInfo& block);
  void recv_trans_blockInfo();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class trans_blockInfoProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<trans_blockInfoIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (trans_blockInfoProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_trans_blockInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  trans_blockInfoProcessor(boost::shared_ptr<trans_blockInfoIf> iface) :
    iface_(iface) {
    processMap_["trans_blockInfo"] = &trans_blockInfoProcessor::process_trans_blockInfo;
  }

  virtual ~trans_blockInfoProcessor() {}
};

class trans_blockInfoProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  trans_blockInfoProcessorFactory(const ::boost::shared_ptr< trans_blockInfoIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< trans_blockInfoIfFactory > handlerFactory_;
};

class trans_blockInfoMultiface : virtual public trans_blockInfoIf {
 public:
  trans_blockInfoMultiface(std::vector<boost::shared_ptr<trans_blockInfoIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~trans_blockInfoMultiface() {}
 protected:
  std::vector<boost::shared_ptr<trans_blockInfoIf> > ifaces_;
  trans_blockInfoMultiface() {}
  void add(boost::shared_ptr<trans_blockInfoIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void trans_blockInfo(const blockInfo& block) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->trans_blockInfo(block);
    }
    ifaces_[i]->trans_blockInfo(block);
  }

};

} // namespace

#endif
