/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Types_TYPES_H
#define Types_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace memanager {

struct TPrimitiveType {
  enum type {
    INVALID_TYPE = 0,
    NULL_TYPE = 1,
    BOOLEAN = 2,
    TINYINT = 3,
    SMALLINT = 4,
    INT = 5,
    BIGINT = 6,
    FLOAT = 7,
    DOUBLE = 8,
    DATE = 9,
    DATETIME = 10,
    TIMESTAMP = 11,
    STRING = 12,
    BINARY = 13,
    DECIMAL = 14,
    CHAR = 15
  };
};

extern const std::map<int, const char*> _TPrimitiveType_VALUES_TO_NAMES;

struct TExplainLevel {
  enum type {
    MINIMAL = 0,
    STANDARD = 1,
    EXTENDED = 2,
    VERBOSE = 3
  };
};

extern const std::map<int, const char*> _TExplainLevel_VALUES_TO_NAMES;

typedef int64_t TTimestamp;

typedef int32_t TPlanNodeId;

typedef int32_t TTupleId;

typedef int32_t TSlotId;

typedef int32_t TTableId;

typedef struct _TColumnType__isset {
  _TColumnType__isset() : len(false), precision(false), scale(false) {}
  bool len;
  bool precision;
  bool scale;
} _TColumnType__isset;

class TColumnType {
 public:

  static const char* ascii_fingerprint; // = "D68013E9233A1A7D7062FA286B362896";
  static const uint8_t binary_fingerprint[16]; // = {0xD6,0x80,0x13,0xE9,0x23,0x3A,0x1A,0x7D,0x70,0x62,0xFA,0x28,0x6B,0x36,0x28,0x96};

  TColumnType() : type((TPrimitiveType::type)0), len(0), precision(0), scale(0) {
  }

  virtual ~TColumnType() throw() {}

  TPrimitiveType::type type;
  int32_t len;
  int32_t precision;
  int32_t scale;

  _TColumnType__isset __isset;

  void __set_type(const TPrimitiveType::type val) {
    type = val;
  }

  void __set_len(const int32_t val) {
    len = val;
    __isset.len = true;
  }

  void __set_precision(const int32_t val) {
    precision = val;
    __isset.precision = true;
  }

  void __set_scale(const int32_t val) {
    scale = val;
    __isset.scale = true;
  }

  bool operator == (const TColumnType & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (__isset.len != rhs.__isset.len)
      return false;
    else if (__isset.len && !(len == rhs.len))
      return false;
    if (__isset.precision != rhs.__isset.precision)
      return false;
    else if (__isset.precision && !(precision == rhs.precision))
      return false;
    if (__isset.scale != rhs.__isset.scale)
      return false;
    else if (__isset.scale && !(scale == rhs.scale))
      return false;
    return true;
  }
  bool operator != (const TColumnType &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TColumnType & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TColumnType &a, TColumnType &b);


class TNetworkAddress {
 public:

  static const char* ascii_fingerprint; // = "EEBC915CE44901401D881E6091423036";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

  TNetworkAddress() : hostname(), port(0) {
  }

  virtual ~TNetworkAddress() throw() {}

  std::string hostname;
  int32_t port;

  void __set_hostname(const std::string& val) {
    hostname = val;
  }

  void __set_port(const int32_t val) {
    port = val;
  }

  bool operator == (const TNetworkAddress & rhs) const
  {
    if (!(hostname == rhs.hostname))
      return false;
    if (!(port == rhs.port))
      return false;
    return true;
  }
  bool operator != (const TNetworkAddress &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TNetworkAddress & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TNetworkAddress &a, TNetworkAddress &b);


class TUniqueId {
 public:

  static const char* ascii_fingerprint; // = "F33135321253DAEB67B0E79E416CA831";
  static const uint8_t binary_fingerprint[16]; // = {0xF3,0x31,0x35,0x32,0x12,0x53,0xDA,0xEB,0x67,0xB0,0xE7,0x9E,0x41,0x6C,0xA8,0x31};

  TUniqueId() : hi(0), lo(0) {
  }

  virtual ~TUniqueId() throw() {}

  int64_t hi;
  int64_t lo;

  void __set_hi(const int64_t val) {
    hi = val;
  }

  void __set_lo(const int64_t val) {
    lo = val;
  }

  bool operator == (const TUniqueId & rhs) const
  {
    if (!(hi == rhs.hi))
      return false;
    if (!(lo == rhs.lo))
      return false;
    return true;
  }
  bool operator != (const TUniqueId &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TUniqueId & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TUniqueId &a, TUniqueId &b);

} // namespace

#endif
