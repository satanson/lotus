/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "Data_types.h"

#include <algorithm>

namespace memanager {

const char* TRowBatch::ascii_fingerprint = "DA731EC0B9FA69ECC857FB6D2038C1D3";
const uint8_t TRowBatch::binary_fingerprint[16] = {0xDA,0x73,0x1E,0xC0,0xB9,0xFA,0x69,0xEC,0xC8,0x57,0xFB,0x6D,0x20,0x38,0xC1,0xD3};

uint32_t TRowBatch::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_num_rows = false;
  bool isset_row_tuples = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->num_rows);
          isset_num_rows = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->row_tuples.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->row_tuples.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readI32(this->row_tuples[_i4]);
            }
            xfer += iprot->readListEnd();
          }
          isset_row_tuples = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->tuple_offsets.clear();
            uint32_t _size5;
            ::apache::thrift::protocol::TType _etype8;
            xfer += iprot->readListBegin(_etype8, _size5);
            this->tuple_offsets.resize(_size5);
            uint32_t _i9;
            for (_i9 = 0; _i9 < _size5; ++_i9)
            {
              xfer += iprot->readI32(this->tuple_offsets[_i9]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.tuple_offsets = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tuple_data);
          this->__isset.tuple_data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->is_compressed);
          this->__isset.is_compressed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_num_rows)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_row_tuples)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TRowBatch::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TRowBatch");

  xfer += oprot->writeFieldBegin("num_rows", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->num_rows);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("row_tuples", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->row_tuples.size()));
    std::vector< ::memanager::TTupleId> ::const_iterator _iter10;
    for (_iter10 = this->row_tuples.begin(); _iter10 != this->row_tuples.end(); ++_iter10)
    {
      xfer += oprot->writeI32((*_iter10));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tuple_offsets", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->tuple_offsets.size()));
    std::vector<int32_t> ::const_iterator _iter11;
    for (_iter11 = this->tuple_offsets.begin(); _iter11 != this->tuple_offsets.end(); ++_iter11)
    {
      xfer += oprot->writeI32((*_iter11));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tuple_data", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->tuple_data);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("is_compressed", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->is_compressed);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TRowBatch &a, TRowBatch &b) {
  using ::std::swap;
  swap(a.num_rows, b.num_rows);
  swap(a.row_tuples, b.row_tuples);
  swap(a.tuple_offsets, b.tuple_offsets);
  swap(a.tuple_data, b.tuple_data);
  swap(a.is_compressed, b.is_compressed);
  swap(a.__isset, b.__isset);
}

const char* TColumnValue::ascii_fingerprint = "15543D4AC23DC11B825EEE5A988F6DEE";
const uint8_t TColumnValue::binary_fingerprint[16] = {0x15,0x54,0x3D,0x4A,0xC2,0x3D,0xC1,0x1B,0x82,0x5E,0xEE,0x5A,0x98,0x8F,0x6D,0xEE};

uint32_t TColumnValue::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->bool_val);
          this->__isset.bool_val = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->byte_val);
          this->__isset.byte_val = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->short_val);
          this->__isset.short_val = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->int_val);
          this->__isset.int_val = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->long_val);
          this->__isset.long_val = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->double_val);
          this->__isset.double_val = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->string_val);
          this->__isset.string_val = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->binary_val);
          this->__isset.binary_val = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TColumnValue::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TColumnValue");

  if (this->__isset.bool_val) {
    xfer += oprot->writeFieldBegin("bool_val", ::apache::thrift::protocol::T_BOOL, 1);
    xfer += oprot->writeBool(this->bool_val);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.int_val) {
    xfer += oprot->writeFieldBegin("int_val", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->int_val);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.long_val) {
    xfer += oprot->writeFieldBegin("long_val", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->long_val);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.double_val) {
    xfer += oprot->writeFieldBegin("double_val", ::apache::thrift::protocol::T_DOUBLE, 4);
    xfer += oprot->writeDouble(this->double_val);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.string_val) {
    xfer += oprot->writeFieldBegin("string_val", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->string_val);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.byte_val) {
    xfer += oprot->writeFieldBegin("byte_val", ::apache::thrift::protocol::T_BYTE, 6);
    xfer += oprot->writeByte(this->byte_val);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.short_val) {
    xfer += oprot->writeFieldBegin("short_val", ::apache::thrift::protocol::T_I16, 7);
    xfer += oprot->writeI16(this->short_val);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.binary_val) {
    xfer += oprot->writeFieldBegin("binary_val", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeBinary(this->binary_val);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TColumnValue &a, TColumnValue &b) {
  using ::std::swap;
  swap(a.bool_val, b.bool_val);
  swap(a.byte_val, b.byte_val);
  swap(a.short_val, b.short_val);
  swap(a.int_val, b.int_val);
  swap(a.long_val, b.long_val);
  swap(a.double_val, b.double_val);
  swap(a.string_val, b.string_val);
  swap(a.binary_val, b.binary_val);
  swap(a.__isset, b.__isset);
}

const char* TResultRow::ascii_fingerprint = "0010C6F851B6BC51F346FDABAD206952";
const uint8_t TResultRow::binary_fingerprint[16] = {0x00,0x10,0xC6,0xF8,0x51,0xB6,0xBC,0x51,0xF3,0x46,0xFD,0xAB,0xAD,0x20,0x69,0x52};

uint32_t TResultRow::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->colVals.clear();
            uint32_t _size12;
            ::apache::thrift::protocol::TType _etype15;
            xfer += iprot->readListBegin(_etype15, _size12);
            this->colVals.resize(_size12);
            uint32_t _i16;
            for (_i16 = 0; _i16 < _size12; ++_i16)
            {
              xfer += this->colVals[_i16].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.colVals = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TResultRow::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TResultRow");

  xfer += oprot->writeFieldBegin("colVals", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->colVals.size()));
    std::vector<TColumnValue> ::const_iterator _iter17;
    for (_iter17 = this->colVals.begin(); _iter17 != this->colVals.end(); ++_iter17)
    {
      xfer += (*_iter17).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TResultRow &a, TResultRow &b) {
  using ::std::swap;
  swap(a.colVals, b.colVals);
  swap(a.__isset, b.__isset);
}

const char* TColumnData::ascii_fingerprint = "2F7A9538DF8A57EF0FF04950F29792C2";
const uint8_t TColumnData::binary_fingerprint[16] = {0x2F,0x7A,0x95,0x38,0xDF,0x8A,0x57,0xEF,0x0F,0xF0,0x49,0x50,0xF2,0x97,0x92,0xC2};

uint32_t TColumnData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_is_null = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->is_null.clear();
            uint32_t _size18;
            ::apache::thrift::protocol::TType _etype21;
            xfer += iprot->readListBegin(_etype21, _size18);
            this->is_null.resize(_size18);
            uint32_t _i22;
            for (_i22 = 0; _i22 < _size18; ++_i22)
            {
              xfer += iprot->readBool(this->is_null[_i22]);
            }
            xfer += iprot->readListEnd();
          }
          isset_is_null = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->bool_vals.clear();
            uint32_t _size23;
            ::apache::thrift::protocol::TType _etype26;
            xfer += iprot->readListBegin(_etype26, _size23);
            this->bool_vals.resize(_size23);
            uint32_t _i27;
            for (_i27 = 0; _i27 < _size23; ++_i27)
            {
              xfer += iprot->readBool(this->bool_vals[_i27]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.bool_vals = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->byte_vals.clear();
            uint32_t _size28;
            ::apache::thrift::protocol::TType _etype31;
            xfer += iprot->readListBegin(_etype31, _size28);
            this->byte_vals.resize(_size28);
            uint32_t _i32;
            for (_i32 = 0; _i32 < _size28; ++_i32)
            {
              xfer += iprot->readByte(this->byte_vals[_i32]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.byte_vals = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->short_vals.clear();
            uint32_t _size33;
            ::apache::thrift::protocol::TType _etype36;
            xfer += iprot->readListBegin(_etype36, _size33);
            this->short_vals.resize(_size33);
            uint32_t _i37;
            for (_i37 = 0; _i37 < _size33; ++_i37)
            {
              xfer += iprot->readI16(this->short_vals[_i37]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.short_vals = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->int_vals.clear();
            uint32_t _size38;
            ::apache::thrift::protocol::TType _etype41;
            xfer += iprot->readListBegin(_etype41, _size38);
            this->int_vals.resize(_size38);
            uint32_t _i42;
            for (_i42 = 0; _i42 < _size38; ++_i42)
            {
              xfer += iprot->readI32(this->int_vals[_i42]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.int_vals = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->long_vals.clear();
            uint32_t _size43;
            ::apache::thrift::protocol::TType _etype46;
            xfer += iprot->readListBegin(_etype46, _size43);
            this->long_vals.resize(_size43);
            uint32_t _i47;
            for (_i47 = 0; _i47 < _size43; ++_i47)
            {
              xfer += iprot->readI64(this->long_vals[_i47]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.long_vals = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->double_vals.clear();
            uint32_t _size48;
            ::apache::thrift::protocol::TType _etype51;
            xfer += iprot->readListBegin(_etype51, _size48);
            this->double_vals.resize(_size48);
            uint32_t _i52;
            for (_i52 = 0; _i52 < _size48; ++_i52)
            {
              xfer += iprot->readDouble(this->double_vals[_i52]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.double_vals = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->string_vals.clear();
            uint32_t _size53;
            ::apache::thrift::protocol::TType _etype56;
            xfer += iprot->readListBegin(_etype56, _size53);
            this->string_vals.resize(_size53);
            uint32_t _i57;
            for (_i57 = 0; _i57 < _size53; ++_i57)
            {
              xfer += iprot->readString(this->string_vals[_i57]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.string_vals = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->binary_vals.clear();
            uint32_t _size58;
            ::apache::thrift::protocol::TType _etype61;
            xfer += iprot->readListBegin(_etype61, _size58);
            this->binary_vals.resize(_size58);
            uint32_t _i62;
            for (_i62 = 0; _i62 < _size58; ++_i62)
            {
              xfer += iprot->readBinary(this->binary_vals[_i62]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.binary_vals = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_is_null)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TColumnData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TColumnData");

  xfer += oprot->writeFieldBegin("is_null", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BOOL, static_cast<uint32_t>(this->is_null.size()));
    std::vector<bool> ::const_iterator _iter63;
    for (_iter63 = this->is_null.begin(); _iter63 != this->is_null.end(); ++_iter63)
    {
      xfer += oprot->writeBool((*_iter63));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.bool_vals) {
    xfer += oprot->writeFieldBegin("bool_vals", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BOOL, static_cast<uint32_t>(this->bool_vals.size()));
      std::vector<bool> ::const_iterator _iter64;
      for (_iter64 = this->bool_vals.begin(); _iter64 != this->bool_vals.end(); ++_iter64)
      {
        xfer += oprot->writeBool((*_iter64));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.byte_vals) {
    xfer += oprot->writeFieldBegin("byte_vals", ::apache::thrift::protocol::T_LIST, 3);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->byte_vals.size()));
      std::vector<int8_t> ::const_iterator _iter65;
      for (_iter65 = this->byte_vals.begin(); _iter65 != this->byte_vals.end(); ++_iter65)
      {
        xfer += oprot->writeByte((*_iter65));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.short_vals) {
    xfer += oprot->writeFieldBegin("short_vals", ::apache::thrift::protocol::T_LIST, 4);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I16, static_cast<uint32_t>(this->short_vals.size()));
      std::vector<int16_t> ::const_iterator _iter66;
      for (_iter66 = this->short_vals.begin(); _iter66 != this->short_vals.end(); ++_iter66)
      {
        xfer += oprot->writeI16((*_iter66));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.int_vals) {
    xfer += oprot->writeFieldBegin("int_vals", ::apache::thrift::protocol::T_LIST, 5);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->int_vals.size()));
      std::vector<int32_t> ::const_iterator _iter67;
      for (_iter67 = this->int_vals.begin(); _iter67 != this->int_vals.end(); ++_iter67)
      {
        xfer += oprot->writeI32((*_iter67));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.long_vals) {
    xfer += oprot->writeFieldBegin("long_vals", ::apache::thrift::protocol::T_LIST, 6);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->long_vals.size()));
      std::vector<int64_t> ::const_iterator _iter68;
      for (_iter68 = this->long_vals.begin(); _iter68 != this->long_vals.end(); ++_iter68)
      {
        xfer += oprot->writeI64((*_iter68));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.double_vals) {
    xfer += oprot->writeFieldBegin("double_vals", ::apache::thrift::protocol::T_LIST, 7);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->double_vals.size()));
      std::vector<double> ::const_iterator _iter69;
      for (_iter69 = this->double_vals.begin(); _iter69 != this->double_vals.end(); ++_iter69)
      {
        xfer += oprot->writeDouble((*_iter69));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.string_vals) {
    xfer += oprot->writeFieldBegin("string_vals", ::apache::thrift::protocol::T_LIST, 8);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->string_vals.size()));
      std::vector<std::string> ::const_iterator _iter70;
      for (_iter70 = this->string_vals.begin(); _iter70 != this->string_vals.end(); ++_iter70)
      {
        xfer += oprot->writeString((*_iter70));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.binary_vals) {
    xfer += oprot->writeFieldBegin("binary_vals", ::apache::thrift::protocol::T_LIST, 9);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->binary_vals.size()));
      std::vector<std::string> ::const_iterator _iter71;
      for (_iter71 = this->binary_vals.begin(); _iter71 != this->binary_vals.end(); ++_iter71)
      {
        xfer += oprot->writeBinary((*_iter71));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TColumnData &a, TColumnData &b) {
  using ::std::swap;
  swap(a.is_null, b.is_null);
  swap(a.bool_vals, b.bool_vals);
  swap(a.byte_vals, b.byte_vals);
  swap(a.short_vals, b.short_vals);
  swap(a.int_vals, b.int_vals);
  swap(a.long_vals, b.long_vals);
  swap(a.double_vals, b.double_vals);
  swap(a.string_vals, b.string_vals);
  swap(a.binary_vals, b.binary_vals);
  swap(a.__isset, b.__isset);
}

const char* TResultSetMetadata::ascii_fingerprint = "9844D65221B9D9152C1984B941D08BBB";
const uint8_t TResultSetMetadata::binary_fingerprint[16] = {0x98,0x44,0xD6,0x52,0x21,0xB9,0xD9,0x15,0x2C,0x19,0x84,0xB9,0x41,0xD0,0x8B,0xBB};

uint32_t TResultSetMetadata::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_columns = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->columns.clear();
            uint32_t _size72;
            ::apache::thrift::protocol::TType _etype75;
            xfer += iprot->readListBegin(_etype75, _size72);
            this->columns.resize(_size72);
            uint32_t _i76;
            for (_i76 = 0; _i76 < _size72; ++_i76)
            {
              xfer += this->columns[_i76].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_columns = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_columns)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TResultSetMetadata::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TResultSetMetadata");

  xfer += oprot->writeFieldBegin("columns", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->columns.size()));
    std::vector< ::memanager::TColumn> ::const_iterator _iter77;
    for (_iter77 = this->columns.begin(); _iter77 != this->columns.end(); ++_iter77)
    {
      xfer += (*_iter77).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TResultSetMetadata &a, TResultSetMetadata &b) {
  using ::std::swap;
  swap(a.columns, b.columns);
}

const char* TResultSet::ascii_fingerprint = "1362716866A6FEEEE411C44C41CC0015";
const uint8_t TResultSet::binary_fingerprint[16] = {0x13,0x62,0x71,0x68,0x66,0xA6,0xFE,0xEE,0xE4,0x11,0xC4,0x4C,0x41,0xCC,0x00,0x15};

uint32_t TResultSet::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_rows = false;
  bool isset_schema = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->rows.clear();
            uint32_t _size78;
            ::apache::thrift::protocol::TType _etype81;
            xfer += iprot->readListBegin(_etype81, _size78);
            this->rows.resize(_size78);
            uint32_t _i82;
            for (_i82 = 0; _i82 < _size78; ++_i82)
            {
              xfer += this->rows[_i82].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_rows = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->schema.read(iprot);
          isset_schema = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_rows)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_schema)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TResultSet::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TResultSet");

  xfer += oprot->writeFieldBegin("rows", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->rows.size()));
    std::vector<TResultRow> ::const_iterator _iter83;
    for (_iter83 = this->rows.begin(); _iter83 != this->rows.end(); ++_iter83)
    {
      xfer += (*_iter83).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("schema", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->schema.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TResultSet &a, TResultSet &b) {
  using ::std::swap;
  swap(a.rows, b.rows);
  swap(a.schema, b.schema);
}

} // namespace
