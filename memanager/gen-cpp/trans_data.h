/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef trans_data_H
#define trans_data_H

#include <thrift/TDispatchProcessor.h>
#include "Data_types.h"

namespace memanager {

class trans_dataIf {
 public:
  virtual ~trans_dataIf() {}
  virtual void trans_data(const TResultSet& resultSet, const  ::memanager::TTable& tb) = 0;
};

class trans_dataIfFactory {
 public:
  typedef trans_dataIf Handler;

  virtual ~trans_dataIfFactory() {}

  virtual trans_dataIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(trans_dataIf* /* handler */) = 0;
};

class trans_dataIfSingletonFactory : virtual public trans_dataIfFactory {
 public:
  trans_dataIfSingletonFactory(const boost::shared_ptr<trans_dataIf>& iface) : iface_(iface) {}
  virtual ~trans_dataIfSingletonFactory() {}

  virtual trans_dataIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(trans_dataIf* /* handler */) {}

 protected:
  boost::shared_ptr<trans_dataIf> iface_;
};

class trans_dataNull : virtual public trans_dataIf {
 public:
  virtual ~trans_dataNull() {}
  void trans_data(const TResultSet& /* resultSet */, const  ::memanager::TTable& /* tb */) {
    return;
  }
};

typedef struct _trans_data_trans_data_args__isset {
  _trans_data_trans_data_args__isset() : resultSet(false), tb(false) {}
  bool resultSet;
  bool tb;
} _trans_data_trans_data_args__isset;

class trans_data_trans_data_args {
 public:

  trans_data_trans_data_args() {
  }

  virtual ~trans_data_trans_data_args() throw() {}

  TResultSet resultSet;
   ::memanager::TTable tb;

  _trans_data_trans_data_args__isset __isset;

  void __set_resultSet(const TResultSet& val) {
    resultSet = val;
  }

  void __set_tb(const  ::memanager::TTable& val) {
    tb = val;
  }

  bool operator == (const trans_data_trans_data_args & rhs) const
  {
    if (!(resultSet == rhs.resultSet))
      return false;
    if (!(tb == rhs.tb))
      return false;
    return true;
  }
  bool operator != (const trans_data_trans_data_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const trans_data_trans_data_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class trans_data_trans_data_pargs {
 public:


  virtual ~trans_data_trans_data_pargs() throw() {}

  const TResultSet* resultSet;
  const  ::memanager::TTable* tb;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class trans_data_trans_data_result {
 public:

  trans_data_trans_data_result() {
  }

  virtual ~trans_data_trans_data_result() throw() {}


  bool operator == (const trans_data_trans_data_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const trans_data_trans_data_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const trans_data_trans_data_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class trans_data_trans_data_presult {
 public:


  virtual ~trans_data_trans_data_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class trans_dataClient : virtual public trans_dataIf {
 public:
  trans_dataClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  trans_dataClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void trans_data(const TResultSet& resultSet, const  ::memanager::TTable& tb);
  void send_trans_data(const TResultSet& resultSet, const  ::memanager::TTable& tb);
  void recv_trans_data();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class trans_dataProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<trans_dataIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (trans_dataProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_trans_data(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  trans_dataProcessor(boost::shared_ptr<trans_dataIf> iface) :
    iface_(iface) {
    processMap_["trans_data"] = &trans_dataProcessor::process_trans_data;
  }

  virtual ~trans_dataProcessor() {}
};

class trans_dataProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  trans_dataProcessorFactory(const ::boost::shared_ptr< trans_dataIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< trans_dataIfFactory > handlerFactory_;
};

class trans_dataMultiface : virtual public trans_dataIf {
 public:
  trans_dataMultiface(std::vector<boost::shared_ptr<trans_dataIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~trans_dataMultiface() {}
 protected:
  std::vector<boost::shared_ptr<trans_dataIf> > ifaces_;
  trans_dataMultiface() {}
  void add(boost::shared_ptr<trans_dataIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void trans_data(const TResultSet& resultSet, const  ::memanager::TTable& tb) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->trans_data(resultSet, tb);
    }
    ifaces_[i]->trans_data(resultSet, tb);
  }

};

} // namespace

#endif
