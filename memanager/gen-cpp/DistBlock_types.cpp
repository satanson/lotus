/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "DistBlock_types.h"

#include <algorithm>

namespace memanager {

const char* blockInfo::ascii_fingerprint = "A8A6BEAE03204D142B807E866EFAC13F";
const uint8_t blockInfo::binary_fingerprint[16] = {0xA8,0xA6,0xBE,0xAE,0x03,0x20,0x4D,0x14,0x2B,0x80,0x7E,0x86,0x6E,0xFA,0xC1,0x3F};

uint32_t blockInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_filePath = false;
  bool isset_offset = false;
  bool isset_blockSize = false;
  bool isset_storeHost = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->filePath);
          isset_filePath = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->offset);
          isset_offset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->blockSize);
          isset_blockSize = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->storeHost);
          isset_storeHost = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_filePath)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_offset)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_blockSize)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_storeHost)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t blockInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("blockInfo");

  xfer += oprot->writeFieldBegin("filePath", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->filePath);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("offset", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->offset);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("blockSize", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->blockSize);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("storeHost", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->storeHost);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(blockInfo &a, blockInfo &b) {
  using ::std::swap;
  swap(a.filePath, b.filePath);
  swap(a.offset, b.offset);
  swap(a.blockSize, b.blockSize);
  swap(a.storeHost, b.storeHost);
}

} // namespace
